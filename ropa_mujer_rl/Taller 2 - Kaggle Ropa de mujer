{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["aCoAbMa12uNy","_xx2KVLkj464"],"mount_file_id":"1vIqMvCIDbRt4DsodrVYvn2bOVlRIM8Bd","authorship_tag":"ABX9TyO+zCyUxXgJlTZhHWIQp7TN"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#Setup"],"metadata":{"id":"je_CnEH-jDOR"}},{"cell_type":"code","execution_count":5,"metadata":{"id":"AuqCPNtseS2a","executionInfo":{"status":"ok","timestamp":1713829905665,"user_tz":300,"elapsed":200,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression, Ridge, ElasticNet\n","from sklearn.metrics import mean_squared_error, r2_score\n","from sklearn.preprocessing import StandardScaler\n","import matplotlib.pyplot as plt\n","import io\n","import os\n","from google.colab import drive\n","from google.colab import files"]},{"cell_type":"code","source":["# Montar Google Drive\n","drive.mount('/content/drive')\n","\n","# Función para cargar todos los archivos CSV de una carpeta específica en Google Drive\n","def cargar_csv_desde_carpeta(carpeta_path):\n","    # Diccionario para almacenar los DataFrames\n","    dataframes = {}\n","\n","    # Lista todos los archivos en la carpeta especificada\n","    archivos = os.listdir(carpeta_path)\n","\n","    # Filtra por archivos CSV y los carga\n","    for archivo in archivos:\n","        if archivo.endswith('.csv'):\n","            ruta_completa = os.path.join(carpeta_path, archivo)\n","            df_temp = pd.read_csv(ruta_completa)\n","\n","            # Utiliza el nombre del archivo como clave (sin la extensión .csv)\n","            clave_df = archivo[:-4]\n","            dataframes[clave_df] = df_temp\n","\n","    return dataframes\n","\n","# Ruta a la carpeta dentro de Google Drive donde tienes tus archivos CSV\n","carpeta_path = '/content/drive/MyDrive/MIA/2doSemestre/Analitica/talleresInd/taller 2'\n","\n","# Cargar los CSVs\n","dfs = cargar_csv_desde_carpeta(carpeta_path)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6xSa9JQ4hSIB","executionInfo":{"status":"ok","timestamp":1713829908889,"user_tz":300,"elapsed":1609,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"4ff23a4d-b37f-47e8-a4a9-870e3edc5d58"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"markdown","source":["#get data & basics stats"],"metadata":{"id":"-QRqIRaXjH2F"}},{"cell_type":"code","source":["df_train = dfs['train']\n","df_test = dfs['test']\n"],"metadata":{"id":"8QxD8towhj7Q","executionInfo":{"status":"ok","timestamp":1713829914209,"user_tz":300,"elapsed":189,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["df_train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"J6rDGEDkhvC9","executionInfo":{"status":"ok","timestamp":1713829786180,"user_tz":300,"elapsed":3,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"9354109a-fd84-4250-f586-0310555e8f4b"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      idloc  edadloc  correo  paginas  telefono   impresa  servicio  nomina  \\\n","0      1648       11   10042       68        35  22609.49        30   66307   \n","1      1259        3   11909      107        42  24561.99        35   29107   \n","2       674       13   10669       75        33  38914.22        52    9519   \n","3      1558        7    6981       65        19  39204.97        30   28651   \n","4      1626       22   10940       74        37  23947.08        46   30654   \n","...     ...      ...     ...      ...       ...       ...       ...     ...   \n","1595    333       17   10652       83        29  35573.17        51   58188   \n","1596   1440       23   11322      104        53  32521.67        62   20538   \n","1597   1685       16   10956      108        34  28150.52        52   21782   \n","1598   1378        5   11059       76        40  22011.37        58   14877   \n","1599   1655       19   13468       99        50  29996.81        67   21983   \n","\n","      idmercado  tamamer  promo    ropamujer  \n","0             8   Grande      2  43747.69227  \n","1             8   Grande      2  37483.68999  \n","2             4   Median      3  57522.99548  \n","3             7   Grande      1  50338.06208  \n","4             7   Grande      2  45675.55005  \n","...         ...      ...    ...          ...  \n","1595          9   Grande      2  65259.86860  \n","1596          7   Median      1  65295.61858  \n","1597          6   Median      2  41784.37387  \n","1598          4  Pequeño      3  53933.72099  \n","1599          7   Grande      2  83908.92370  \n","\n","[1600 rows x 12 columns]"],"text/html":["\n","  <div id=\"df-60e9aa55-cc78-4c82-8541-e986b13dbe4d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>idloc</th>\n","      <th>edadloc</th>\n","      <th>correo</th>\n","      <th>paginas</th>\n","      <th>telefono</th>\n","      <th>impresa</th>\n","      <th>servicio</th>\n","      <th>nomina</th>\n","      <th>idmercado</th>\n","      <th>tamamer</th>\n","      <th>promo</th>\n","      <th>ropamujer</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1648</td>\n","      <td>11</td>\n","      <td>10042</td>\n","      <td>68</td>\n","      <td>35</td>\n","      <td>22609.49</td>\n","      <td>30</td>\n","      <td>66307</td>\n","      <td>8</td>\n","      <td>Grande</td>\n","      <td>2</td>\n","      <td>43747.69227</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1259</td>\n","      <td>3</td>\n","      <td>11909</td>\n","      <td>107</td>\n","      <td>42</td>\n","      <td>24561.99</td>\n","      <td>35</td>\n","      <td>29107</td>\n","      <td>8</td>\n","      <td>Grande</td>\n","      <td>2</td>\n","      <td>37483.68999</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>674</td>\n","      <td>13</td>\n","      <td>10669</td>\n","      <td>75</td>\n","      <td>33</td>\n","      <td>38914.22</td>\n","      <td>52</td>\n","      <td>9519</td>\n","      <td>4</td>\n","      <td>Median</td>\n","      <td>3</td>\n","      <td>57522.99548</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1558</td>\n","      <td>7</td>\n","      <td>6981</td>\n","      <td>65</td>\n","      <td>19</td>\n","      <td>39204.97</td>\n","      <td>30</td>\n","      <td>28651</td>\n","      <td>7</td>\n","      <td>Grande</td>\n","      <td>1</td>\n","      <td>50338.06208</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1626</td>\n","      <td>22</td>\n","      <td>10940</td>\n","      <td>74</td>\n","      <td>37</td>\n","      <td>23947.08</td>\n","      <td>46</td>\n","      <td>30654</td>\n","      <td>7</td>\n","      <td>Grande</td>\n","      <td>2</td>\n","      <td>45675.55005</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1595</th>\n","      <td>333</td>\n","      <td>17</td>\n","      <td>10652</td>\n","      <td>83</td>\n","      <td>29</td>\n","      <td>35573.17</td>\n","      <td>51</td>\n","      <td>58188</td>\n","      <td>9</td>\n","      <td>Grande</td>\n","      <td>2</td>\n","      <td>65259.86860</td>\n","    </tr>\n","    <tr>\n","      <th>1596</th>\n","      <td>1440</td>\n","      <td>23</td>\n","      <td>11322</td>\n","      <td>104</td>\n","      <td>53</td>\n","      <td>32521.67</td>\n","      <td>62</td>\n","      <td>20538</td>\n","      <td>7</td>\n","      <td>Median</td>\n","      <td>1</td>\n","      <td>65295.61858</td>\n","    </tr>\n","    <tr>\n","      <th>1597</th>\n","      <td>1685</td>\n","      <td>16</td>\n","      <td>10956</td>\n","      <td>108</td>\n","      <td>34</td>\n","      <td>28150.52</td>\n","      <td>52</td>\n","      <td>21782</td>\n","      <td>6</td>\n","      <td>Median</td>\n","      <td>2</td>\n","      <td>41784.37387</td>\n","    </tr>\n","    <tr>\n","      <th>1598</th>\n","      <td>1378</td>\n","      <td>5</td>\n","      <td>11059</td>\n","      <td>76</td>\n","      <td>40</td>\n","      <td>22011.37</td>\n","      <td>58</td>\n","      <td>14877</td>\n","      <td>4</td>\n","      <td>Pequeño</td>\n","      <td>3</td>\n","      <td>53933.72099</td>\n","    </tr>\n","    <tr>\n","      <th>1599</th>\n","      <td>1655</td>\n","      <td>19</td>\n","      <td>13468</td>\n","      <td>99</td>\n","      <td>50</td>\n","      <td>29996.81</td>\n","      <td>67</td>\n","      <td>21983</td>\n","      <td>7</td>\n","      <td>Grande</td>\n","      <td>2</td>\n","      <td>83908.92370</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1600 rows × 12 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-60e9aa55-cc78-4c82-8541-e986b13dbe4d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-60e9aa55-cc78-4c82-8541-e986b13dbe4d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-60e9aa55-cc78-4c82-8541-e986b13dbe4d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-72fb6c11-77d0-425b-9351-d5acba84f140\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-72fb6c11-77d0-425b-9351-d5acba84f140')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-72fb6c11-77d0-425b-9351-d5acba84f140 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_d4a01154-5b58-4d89-92b4-ee9e33a3c3ce\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_train')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_d4a01154-5b58-4d89-92b4-ee9e33a3c3ce button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_train');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_train","summary":"{\n  \"name\": \"df_train\",\n  \"rows\": 1600,\n  \"fields\": [\n    {\n      \"column\": \"idloc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 577,\n        \"min\": 1,\n        \"max\": 1998,\n        \"num_unique_values\": 1600,\n        \"samples\": [\n          1263,\n          1545,\n          43\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"edadloc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 1,\n        \"max\": 25,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          23,\n          1,\n          11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"correo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2400,\n        \"min\": 1147,\n        \"max\": 15259,\n        \"num_unique_values\": 1393,\n        \"samples\": [\n          9673,\n          10827,\n          10753\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"paginas\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": 51,\n        \"max\": 114,\n        \"num_unique_values\": 64,\n        \"samples\": [\n          96,\n          104,\n          68\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"telefono\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 17,\n        \"max\": 59,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          41,\n          58,\n          36\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"impresa\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6251.170238593878,\n        \"min\": 18061.2,\n        \"max\": 40027.78,\n        \"num_unique_values\": 1600,\n        \"samples\": [\n          32493.13,\n          39994.7,\n          30117.31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"servicio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 15,\n        \"max\": 68,\n        \"num_unique_values\": 54,\n        \"samples\": [\n          55,\n          64,\n          60\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nomina\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18217,\n        \"min\": 901,\n        \"max\": 135882,\n        \"num_unique_values\": 1573,\n        \"samples\": [\n          24263,\n          9453,\n          19494\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"idmercado\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          2,\n          4,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tamamer\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Grande\",\n          \"Median\",\n          \"Peque\\u00f1o\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"promo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ropamujer\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17558.260270972463,\n        \"min\": 1289.240694,\n        \"max\": 117709.2577,\n        \"num_unique_values\": 1600,\n        \"samples\": [\n          57274.08303,\n          74868.33293,\n          41884.14\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["df_train.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"0PV-2O05hyI5","executionInfo":{"status":"ok","timestamp":1713829787936,"user_tz":300,"elapsed":1758,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"dc899869-d8f5-468b-9520-2c3218ec72b9"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             idloc      edadloc        correo      paginas     telefono  \\\n","count  1600.000000  1600.000000   1600.000000  1600.000000  1600.000000   \n","mean    995.531875    10.469375  10598.675625    85.042500    37.637500   \n","std     577.536360     7.385588   2400.668832    15.935398     9.745792   \n","min       1.000000     1.000000   1147.000000    51.000000    17.000000   \n","25%     495.750000     4.000000   9644.250000    74.000000    30.000000   \n","50%     996.000000     9.000000  10480.000000    84.000000    36.000000   \n","75%    1495.250000    17.000000  11763.500000    98.000000    43.000000   \n","max    1998.000000    25.000000  15259.000000   114.000000    59.000000   \n","\n","            impresa     servicio         nomina    idmercado        promo  \\\n","count   1600.000000  1600.000000    1600.000000  1600.000000  1600.000000   \n","mean   28834.617337    43.651250   24104.131250     4.925000     1.976875   \n","std     6251.170239    13.241524   18217.352027     2.606458     0.749461   \n","min    18061.200000    15.000000     901.000000     1.000000     1.000000   \n","25%    23562.317500    33.000000   10680.500000     3.000000     1.000000   \n","50%    28734.790000    43.000000   18886.500000     5.000000     2.000000   \n","75%    34022.992500    54.000000   31637.250000     7.000000     3.000000   \n","max    40027.780000    68.000000  135882.000000     9.000000     3.000000   \n","\n","           ropamujer  \n","count    1600.000000  \n","mean    50978.380813  \n","std     17558.260271  \n","min      1289.240694  \n","25%     38478.318918  \n","50%     49968.340580  \n","75%     63255.196577  \n","max    117709.257700  "],"text/html":["\n","  <div id=\"df-1dd837fb-2da7-4c2a-8dcf-ce14ead91551\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>idloc</th>\n","      <th>edadloc</th>\n","      <th>correo</th>\n","      <th>paginas</th>\n","      <th>telefono</th>\n","      <th>impresa</th>\n","      <th>servicio</th>\n","      <th>nomina</th>\n","      <th>idmercado</th>\n","      <th>promo</th>\n","      <th>ropamujer</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>1600.000000</td>\n","      <td>1600.000000</td>\n","      <td>1600.000000</td>\n","      <td>1600.000000</td>\n","      <td>1600.000000</td>\n","      <td>1600.000000</td>\n","      <td>1600.000000</td>\n","      <td>1600.000000</td>\n","      <td>1600.000000</td>\n","      <td>1600.000000</td>\n","      <td>1600.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>995.531875</td>\n","      <td>10.469375</td>\n","      <td>10598.675625</td>\n","      <td>85.042500</td>\n","      <td>37.637500</td>\n","      <td>28834.617337</td>\n","      <td>43.651250</td>\n","      <td>24104.131250</td>\n","      <td>4.925000</td>\n","      <td>1.976875</td>\n","      <td>50978.380813</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>577.536360</td>\n","      <td>7.385588</td>\n","      <td>2400.668832</td>\n","      <td>15.935398</td>\n","      <td>9.745792</td>\n","      <td>6251.170239</td>\n","      <td>13.241524</td>\n","      <td>18217.352027</td>\n","      <td>2.606458</td>\n","      <td>0.749461</td>\n","      <td>17558.260271</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1147.000000</td>\n","      <td>51.000000</td>\n","      <td>17.000000</td>\n","      <td>18061.200000</td>\n","      <td>15.000000</td>\n","      <td>901.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1289.240694</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>495.750000</td>\n","      <td>4.000000</td>\n","      <td>9644.250000</td>\n","      <td>74.000000</td>\n","      <td>30.000000</td>\n","      <td>23562.317500</td>\n","      <td>33.000000</td>\n","      <td>10680.500000</td>\n","      <td>3.000000</td>\n","      <td>1.000000</td>\n","      <td>38478.318918</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>996.000000</td>\n","      <td>9.000000</td>\n","      <td>10480.000000</td>\n","      <td>84.000000</td>\n","      <td>36.000000</td>\n","      <td>28734.790000</td>\n","      <td>43.000000</td>\n","      <td>18886.500000</td>\n","      <td>5.000000</td>\n","      <td>2.000000</td>\n","      <td>49968.340580</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>1495.250000</td>\n","      <td>17.000000</td>\n","      <td>11763.500000</td>\n","      <td>98.000000</td>\n","      <td>43.000000</td>\n","      <td>34022.992500</td>\n","      <td>54.000000</td>\n","      <td>31637.250000</td>\n","      <td>7.000000</td>\n","      <td>3.000000</td>\n","      <td>63255.196577</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>1998.000000</td>\n","      <td>25.000000</td>\n","      <td>15259.000000</td>\n","      <td>114.000000</td>\n","      <td>59.000000</td>\n","      <td>40027.780000</td>\n","      <td>68.000000</td>\n","      <td>135882.000000</td>\n","      <td>9.000000</td>\n","      <td>3.000000</td>\n","      <td>117709.257700</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1dd837fb-2da7-4c2a-8dcf-ce14ead91551')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1dd837fb-2da7-4c2a-8dcf-ce14ead91551 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1dd837fb-2da7-4c2a-8dcf-ce14ead91551');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-88e5a44e-f2e5-4860-ad6d-372e071c35ae\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-88e5a44e-f2e5-4860-ad6d-372e071c35ae')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-88e5a44e-f2e5-4860-ad6d-372e071c35ae button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df_train\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"idloc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 657.7987402488105,\n        \"min\": 1.0,\n        \"max\": 1998.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          995.531875,\n          996.0,\n          1600.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"edadloc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 562.0056367596029,\n        \"min\": 1.0,\n        \"max\": 1600.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          10.469375,\n          9.0,\n          1600.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"correo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5366.390777836242,\n        \"min\": 1147.0,\n        \"max\": 15259.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          10598.675625,\n          10480.0,\n          1600.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"paginas\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 540.1547911538805,\n        \"min\": 15.935397839878268,\n        \"max\": 1600.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          85.0425,\n          84.0,\n          1600.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"telefono\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 554.156114657264,\n        \"min\": 9.745791734658328,\n        \"max\": 1600.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          37.6375,\n          36.0,\n          1600.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"impresa\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13312.284883251516,\n        \"min\": 1600.0,\n        \"max\": 40027.78,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          28834.6173375,\n          28734.79,\n          1600.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"servicio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 552.3613460500972,\n        \"min\": 13.241524068712367,\n        \"max\": 1600.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          43.65125,\n          43.0,\n          1600.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nomina\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 43975.44757961929,\n        \"min\": 901.0,\n        \"max\": 135882.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          24104.13125,\n          18886.5,\n          1600.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"idmercado\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 564.048019644675,\n        \"min\": 1.0,\n        \"max\": 1600.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.925,\n          5.0,\n          1600.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"promo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 565.0433220441477,\n        \"min\": 0.7494606670347318,\n        \"max\": 1600.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1600.0,\n          1.976875,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ropamujer\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38217.765302101,\n        \"min\": 1289.240694,\n        \"max\": 117709.2577,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          50978.380812882504,\n          49968.340580000004,\n          1600.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["print(df_train.shape)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wFQZa2bfivr_","executionInfo":{"status":"ok","timestamp":1713829787936,"user_tz":300,"elapsed":69,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"11f2ff9b-6bd7-4461-c52c-ff08dca69823"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["(1600, 12)\n"]}]},{"cell_type":"code","source":["df_test"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"zOQytBs3h3VM","executionInfo":{"status":"ok","timestamp":1713829787936,"user_tz":300,"elapsed":45,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"8bc68adb-e935-4dab-8610-e90d0c8cbd33"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     idloc  edadloc  correo  paginas  telefono   impresa  servicio  nomina  \\\n","0       22        3    9115       65        30  26496.36        27   21936   \n","1       14       18    8438       82        35  20911.52        22   25542   \n","2       91        5   11890       92        50  24474.30        53   18591   \n","3       32       20    9003       54        27  33446.10        26   23028   \n","4       28        8    9152       91        24  27234.64        22   20214   \n","..     ...      ...     ...      ...       ...       ...       ...     ...   \n","395   1993       21    9543       81        31  26822.03        56   96575   \n","396   1996       22   10229       79        30  24233.06        62    6904   \n","397   1997        8    9822       54        36  19195.68        40    9563   \n","398   1999       18   10701       79        37  33057.30        47   27438   \n","399   2000       20   10564      109        31  26381.04        49   21387   \n","\n","     idmercado  tamamer  promo  ropamujer  \n","0            2   Grande      3        NaN  \n","1            1   Grande      2        NaN  \n","2            9   Grande      1        NaN  \n","3            2   Grande      3        NaN  \n","4            2   Grande      3        NaN  \n","..         ...      ...    ...        ...  \n","395          1   Grande      2        NaN  \n","396          6  Pequeño      3        NaN  \n","397          3  Pequeño      3        NaN  \n","398          9   Median      2        NaN  \n","399          6   Grande      2        NaN  \n","\n","[400 rows x 12 columns]"],"text/html":["\n","  <div id=\"df-b2a8f821-2744-4102-a146-fa66af5f1238\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>idloc</th>\n","      <th>edadloc</th>\n","      <th>correo</th>\n","      <th>paginas</th>\n","      <th>telefono</th>\n","      <th>impresa</th>\n","      <th>servicio</th>\n","      <th>nomina</th>\n","      <th>idmercado</th>\n","      <th>tamamer</th>\n","      <th>promo</th>\n","      <th>ropamujer</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>22</td>\n","      <td>3</td>\n","      <td>9115</td>\n","      <td>65</td>\n","      <td>30</td>\n","      <td>26496.36</td>\n","      <td>27</td>\n","      <td>21936</td>\n","      <td>2</td>\n","      <td>Grande</td>\n","      <td>3</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>14</td>\n","      <td>18</td>\n","      <td>8438</td>\n","      <td>82</td>\n","      <td>35</td>\n","      <td>20911.52</td>\n","      <td>22</td>\n","      <td>25542</td>\n","      <td>1</td>\n","      <td>Grande</td>\n","      <td>2</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>91</td>\n","      <td>5</td>\n","      <td>11890</td>\n","      <td>92</td>\n","      <td>50</td>\n","      <td>24474.30</td>\n","      <td>53</td>\n","      <td>18591</td>\n","      <td>9</td>\n","      <td>Grande</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>32</td>\n","      <td>20</td>\n","      <td>9003</td>\n","      <td>54</td>\n","      <td>27</td>\n","      <td>33446.10</td>\n","      <td>26</td>\n","      <td>23028</td>\n","      <td>2</td>\n","      <td>Grande</td>\n","      <td>3</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>28</td>\n","      <td>8</td>\n","      <td>9152</td>\n","      <td>91</td>\n","      <td>24</td>\n","      <td>27234.64</td>\n","      <td>22</td>\n","      <td>20214</td>\n","      <td>2</td>\n","      <td>Grande</td>\n","      <td>3</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>395</th>\n","      <td>1993</td>\n","      <td>21</td>\n","      <td>9543</td>\n","      <td>81</td>\n","      <td>31</td>\n","      <td>26822.03</td>\n","      <td>56</td>\n","      <td>96575</td>\n","      <td>1</td>\n","      <td>Grande</td>\n","      <td>2</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>396</th>\n","      <td>1996</td>\n","      <td>22</td>\n","      <td>10229</td>\n","      <td>79</td>\n","      <td>30</td>\n","      <td>24233.06</td>\n","      <td>62</td>\n","      <td>6904</td>\n","      <td>6</td>\n","      <td>Pequeño</td>\n","      <td>3</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>397</th>\n","      <td>1997</td>\n","      <td>8</td>\n","      <td>9822</td>\n","      <td>54</td>\n","      <td>36</td>\n","      <td>19195.68</td>\n","      <td>40</td>\n","      <td>9563</td>\n","      <td>3</td>\n","      <td>Pequeño</td>\n","      <td>3</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>398</th>\n","      <td>1999</td>\n","      <td>18</td>\n","      <td>10701</td>\n","      <td>79</td>\n","      <td>37</td>\n","      <td>33057.30</td>\n","      <td>47</td>\n","      <td>27438</td>\n","      <td>9</td>\n","      <td>Median</td>\n","      <td>2</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>399</th>\n","      <td>2000</td>\n","      <td>20</td>\n","      <td>10564</td>\n","      <td>109</td>\n","      <td>31</td>\n","      <td>26381.04</td>\n","      <td>49</td>\n","      <td>21387</td>\n","      <td>6</td>\n","      <td>Grande</td>\n","      <td>2</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>400 rows × 12 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b2a8f821-2744-4102-a146-fa66af5f1238')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b2a8f821-2744-4102-a146-fa66af5f1238 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b2a8f821-2744-4102-a146-fa66af5f1238');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-585ff03d-06dc-4432-8f7a-9956aea07316\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-585ff03d-06dc-4432-8f7a-9956aea07316')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-585ff03d-06dc-4432-8f7a-9956aea07316 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_71b77099-d82a-48ed-9526-d974f7c22705\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_test')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_71b77099-d82a-48ed-9526-d974f7c22705 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_test');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_test","summary":"{\n  \"name\": \"df_test\",\n  \"rows\": 400,\n  \"fields\": [\n    {\n      \"column\": \"idloc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 577,\n        \"min\": 14,\n        \"max\": 2000,\n        \"num_unique_values\": 400,\n        \"samples\": [\n          1048,\n          1421,\n          202\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"edadloc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 1,\n        \"max\": 25,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          9,\n          6,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"correo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2553,\n        \"min\": 1223,\n        \"max\": 15263,\n        \"num_unique_values\": 391,\n        \"samples\": [\n          10206,\n          10538,\n          11021\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"paginas\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16,\n        \"min\": 51,\n        \"max\": 114,\n        \"num_unique_values\": 63,\n        \"samples\": [\n          67,\n          70,\n          65\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"telefono\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 17,\n        \"max\": 59,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          20,\n          45,\n          47\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"impresa\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5951.592078590133,\n        \"min\": 18173.01,\n        \"max\": 40011.76,\n        \"num_unique_values\": 400,\n        \"samples\": [\n          18672.08,\n          39424.65,\n          28071.19\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"servicio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 15,\n        \"max\": 68,\n        \"num_unique_values\": 54,\n        \"samples\": [\n          19,\n          55,\n          20\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nomina\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18451,\n        \"min\": 2101,\n        \"max\": 97686,\n        \"num_unique_values\": 400,\n        \"samples\": [\n          5666,\n          50754,\n          46059\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"idmercado\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          7,\n          1,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tamamer\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Grande\",\n          \"Peque\\u00f1o\",\n          \"Median\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"promo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ropamujer\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["df_test.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"ff8FkMnHi6Za","executionInfo":{"status":"ok","timestamp":1713829787936,"user_tz":300,"elapsed":44,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"13e57de0-af0d-4ed1-a4de-1dd08b43c7f3"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             idloc     edadloc        correo     paginas    telefono  \\\n","count   400.000000  400.000000    400.000000  400.000000  400.000000   \n","mean   1020.372500   10.250000  10548.070000   85.100000   37.467500   \n","std     577.622375    7.312056   2553.108587   16.187653    9.717511   \n","min      14.000000    1.000000   1223.000000   51.000000   17.000000   \n","25%     529.750000    4.000000   9608.750000   74.000000   31.000000   \n","50%    1016.000000    8.000000  10426.000000   86.000000   36.000000   \n","75%    1552.500000   16.000000  11920.000000   98.000000   44.000000   \n","max    2000.000000   25.000000  15263.000000  114.000000   59.000000   \n","\n","            impresa   servicio       nomina   idmercado       promo  ropamujer  \n","count    400.000000  400.00000    400.00000  400.000000  400.000000        0.0  \n","mean   28779.412350   43.61750  25689.75250    4.652500    1.935000        NaN  \n","std     5951.592079   13.70989  18451.86149    2.593948    0.743072        NaN  \n","min    18173.010000   15.00000   2101.00000    1.000000    1.000000        NaN  \n","25%    24083.055000   33.00000  11487.25000    2.000000    1.000000        NaN  \n","50%    28810.200000   43.00000  20818.50000    5.000000    2.000000        NaN  \n","75%    33553.857500   55.00000  36718.50000    7.000000    2.000000        NaN  \n","max    40011.760000   68.00000  97686.00000    9.000000    3.000000        NaN  "],"text/html":["\n","  <div id=\"df-c82172fc-6270-4ce4-b479-6f502d1f5d47\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>idloc</th>\n","      <th>edadloc</th>\n","      <th>correo</th>\n","      <th>paginas</th>\n","      <th>telefono</th>\n","      <th>impresa</th>\n","      <th>servicio</th>\n","      <th>nomina</th>\n","      <th>idmercado</th>\n","      <th>promo</th>\n","      <th>ropamujer</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>400.000000</td>\n","      <td>400.000000</td>\n","      <td>400.000000</td>\n","      <td>400.000000</td>\n","      <td>400.000000</td>\n","      <td>400.000000</td>\n","      <td>400.00000</td>\n","      <td>400.00000</td>\n","      <td>400.000000</td>\n","      <td>400.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>1020.372500</td>\n","      <td>10.250000</td>\n","      <td>10548.070000</td>\n","      <td>85.100000</td>\n","      <td>37.467500</td>\n","      <td>28779.412350</td>\n","      <td>43.61750</td>\n","      <td>25689.75250</td>\n","      <td>4.652500</td>\n","      <td>1.935000</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>577.622375</td>\n","      <td>7.312056</td>\n","      <td>2553.108587</td>\n","      <td>16.187653</td>\n","      <td>9.717511</td>\n","      <td>5951.592079</td>\n","      <td>13.70989</td>\n","      <td>18451.86149</td>\n","      <td>2.593948</td>\n","      <td>0.743072</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>14.000000</td>\n","      <td>1.000000</td>\n","      <td>1223.000000</td>\n","      <td>51.000000</td>\n","      <td>17.000000</td>\n","      <td>18173.010000</td>\n","      <td>15.00000</td>\n","      <td>2101.00000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>529.750000</td>\n","      <td>4.000000</td>\n","      <td>9608.750000</td>\n","      <td>74.000000</td>\n","      <td>31.000000</td>\n","      <td>24083.055000</td>\n","      <td>33.00000</td>\n","      <td>11487.25000</td>\n","      <td>2.000000</td>\n","      <td>1.000000</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>1016.000000</td>\n","      <td>8.000000</td>\n","      <td>10426.000000</td>\n","      <td>86.000000</td>\n","      <td>36.000000</td>\n","      <td>28810.200000</td>\n","      <td>43.00000</td>\n","      <td>20818.50000</td>\n","      <td>5.000000</td>\n","      <td>2.000000</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>1552.500000</td>\n","      <td>16.000000</td>\n","      <td>11920.000000</td>\n","      <td>98.000000</td>\n","      <td>44.000000</td>\n","      <td>33553.857500</td>\n","      <td>55.00000</td>\n","      <td>36718.50000</td>\n","      <td>7.000000</td>\n","      <td>2.000000</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>2000.000000</td>\n","      <td>25.000000</td>\n","      <td>15263.000000</td>\n","      <td>114.000000</td>\n","      <td>59.000000</td>\n","      <td>40011.760000</td>\n","      <td>68.00000</td>\n","      <td>97686.00000</td>\n","      <td>9.000000</td>\n","      <td>3.000000</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c82172fc-6270-4ce4-b479-6f502d1f5d47')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c82172fc-6270-4ce4-b479-6f502d1f5d47 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c82172fc-6270-4ce4-b479-6f502d1f5d47');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-618b69ca-31f4-45d9-a4bb-d48bdd61bfd0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-618b69ca-31f4-45d9-a4bb-d48bdd61bfd0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-618b69ca-31f4-45d9-a4bb-d48bdd61bfd0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df_test\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"idloc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 647.9311236246729,\n        \"min\": 14.0,\n        \"max\": 2000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1020.3725,\n          1016.0,\n          400.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"edadloc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 138.00837555492396,\n        \"min\": 1.0,\n        \"max\": 400.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          10.25,\n          8.0,\n          400.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"correo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5553.771949974476,\n        \"min\": 400.0,\n        \"max\": 15263.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          10548.07,\n          10426.0,\n          400.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"paginas\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 118.79670027962793,\n        \"min\": 16.187652709723746,\n        \"max\": 400.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          85.1,\n          86.0,\n          400.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"telefono\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 130.4866797049818,\n        \"min\": 9.717510936293948,\n        \"max\": 400.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          37.4675,\n          36.0,\n          400.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"impresa\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13583.50275638833,\n        \"min\": 400.0,\n        \"max\": 40011.76,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          28779.41235,\n          28810.2,\n          400.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"servicio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 129.0445046456055,\n        \"min\": 13.709890462408081,\n        \"max\": 400.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          43.6175,\n          43.0,\n          400.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nomina\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31101.786578048162,\n        \"min\": 400.0,\n        \"max\": 97686.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          25689.7525,\n          20818.5,\n          400.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"idmercado\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 139.86814555115978,\n        \"min\": 1.0,\n        \"max\": 400.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.6525,\n          5.0,\n          400.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"promo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 140.83345891606402,\n        \"min\": 0.7430715904078005,\n        \"max\": 400.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          400.0,\n          1.935,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ropamujer\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["print(df_test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y4dCRU22i9lR","executionInfo":{"status":"ok","timestamp":1713829787936,"user_tz":300,"elapsed":44,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"34de3a3a-c178-4f74-833f-899dee384784"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["(400, 12)\n"]}]},{"cell_type":"markdown","source":["#Informe dataprep"],"metadata":{"id":"df8GSwWhjVpI"}},{"cell_type":"code","source":["!pip install dataprep"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lXGu5IgMj-Au","executionInfo":{"status":"ok","timestamp":1713829883023,"user_tz":300,"elapsed":22802,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"05c17bff-2c16-411f-da0c-a5d7575e5cb0"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: dataprep in /usr/local/lib/python3.10/dist-packages (0.4.5)\n","Requirement already satisfied: aiohttp<4.0,>=3.6 in /usr/local/lib/python3.10/dist-packages (from dataprep) (3.9.5)\n","Requirement already satisfied: bokeh<3,>=2 in /usr/local/lib/python3.10/dist-packages (from dataprep) (2.4.3)\n","Requirement already satisfied: dask[array,dataframe,delayed]>=2022.3.0 in /usr/local/lib/python3.10/dist-packages (from dataprep) (2023.8.1)\n","Requirement already satisfied: flask<3,>=2 in /usr/local/lib/python3.10/dist-packages (from dataprep) (2.2.5)\n","Requirement already satisfied: flask_cors<4.0.0,>=3.0.10 in /usr/local/lib/python3.10/dist-packages (from dataprep) (3.0.10)\n","Requirement already satisfied: ipywidgets<8.0,>=7.5 in /usr/local/lib/python3.10/dist-packages (from dataprep) (7.7.1)\n","Requirement already satisfied: jinja2<3.1,>=3.0 in /usr/local/lib/python3.10/dist-packages (from dataprep) (3.0.3)\n","Requirement already satisfied: jsonpath-ng<2.0,>=1.5 in /usr/local/lib/python3.10/dist-packages (from dataprep) (1.6.1)\n","Requirement already satisfied: metaphone<0.7,>=0.6 in /usr/local/lib/python3.10/dist-packages (from dataprep) (0.6)\n","Requirement already satisfied: nltk<4.0.0,>=3.6.7 in /usr/local/lib/python3.10/dist-packages (from dataprep) (3.8.1)\n","Requirement already satisfied: numpy<2.0,>=1.21 in /usr/local/lib/python3.10/dist-packages (from dataprep) (1.25.2)\n","Requirement already satisfied: pandas<2.0,>=1.1 in /usr/local/lib/python3.10/dist-packages (from dataprep) (1.5.3)\n","Requirement already satisfied: pydantic<2.0,>=1.6 in /usr/local/lib/python3.10/dist-packages (from dataprep) (1.10.15)\n","Requirement already satisfied: pydot<2.0.0,>=1.4.2 in /usr/local/lib/python3.10/dist-packages (from dataprep) (1.4.2)\n","Requirement already satisfied: python-crfsuite==0.9.8 in /usr/local/lib/python3.10/dist-packages (from dataprep) (0.9.8)\n","Requirement already satisfied: python-stdnum<2.0,>=1.16 in /usr/local/lib/python3.10/dist-packages (from dataprep) (1.20)\n","Requirement already satisfied: rapidfuzz<3.0.0,>=2.1.2 in /usr/local/lib/python3.10/dist-packages (from dataprep) (2.15.2)\n","Requirement already satisfied: regex<2022.0.0,>=2021.8.3 in /usr/local/lib/python3.10/dist-packages (from dataprep) (2021.11.10)\n","Requirement already satisfied: scipy<2.0,>=1.8 in /usr/local/lib/python3.10/dist-packages (from dataprep) (1.11.4)\n","Requirement already satisfied: sqlalchemy==1.3.24 in /usr/local/lib/python3.10/dist-packages (from dataprep) (1.3.24)\n","Requirement already satisfied: tqdm<5.0,>=4.48 in /usr/local/lib/python3.10/dist-packages (from dataprep) (4.66.2)\n","Requirement already satisfied: varname<0.9.0,>=0.8.1 in /usr/local/lib/python3.10/dist-packages (from dataprep) (0.8.3)\n","Requirement already satisfied: wordcloud<2.0,>=1.8 in /usr/local/lib/python3.10/dist-packages (from dataprep) (1.9.3)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0,>=3.6->dataprep) (1.3.1)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0,>=3.6->dataprep) (23.2.0)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0,>=3.6->dataprep) (1.4.1)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0,>=3.6->dataprep) (6.0.5)\n","Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0,>=3.6->dataprep) (1.9.4)\n","Requirement already satisfied: async-timeout<5.0,>=4.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0,>=3.6->dataprep) (4.0.3)\n","Requirement already satisfied: packaging>=16.8 in /usr/local/lib/python3.10/dist-packages (from bokeh<3,>=2->dataprep) (24.0)\n","Requirement already satisfied: pillow>=7.1.0 in /usr/local/lib/python3.10/dist-packages (from bokeh<3,>=2->dataprep) (9.4.0)\n","Requirement already satisfied: PyYAML>=3.10 in /usr/local/lib/python3.10/dist-packages (from bokeh<3,>=2->dataprep) (6.0.1)\n","Requirement already satisfied: tornado>=5.1 in /usr/local/lib/python3.10/dist-packages (from bokeh<3,>=2->dataprep) (6.3.3)\n","Requirement already satisfied: typing-extensions>=3.10.0 in /usr/local/lib/python3.10/dist-packages (from bokeh<3,>=2->dataprep) (4.11.0)\n","Requirement already satisfied: click>=8.0 in /usr/local/lib/python3.10/dist-packages (from dask[array,dataframe,delayed]>=2022.3.0->dataprep) (8.1.7)\n","Requirement already satisfied: cloudpickle>=1.5.0 in /usr/local/lib/python3.10/dist-packages (from dask[array,dataframe,delayed]>=2022.3.0->dataprep) (2.2.1)\n","Requirement already satisfied: fsspec>=2021.09.0 in /usr/local/lib/python3.10/dist-packages (from dask[array,dataframe,delayed]>=2022.3.0->dataprep) (2023.6.0)\n","Requirement already satisfied: partd>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from dask[array,dataframe,delayed]>=2022.3.0->dataprep) (1.4.1)\n","Requirement already satisfied: toolz>=0.10.0 in /usr/local/lib/python3.10/dist-packages (from dask[array,dataframe,delayed]>=2022.3.0->dataprep) (0.12.1)\n","Requirement already satisfied: importlib-metadata>=4.13.0 in /usr/local/lib/python3.10/dist-packages (from dask[array,dataframe,delayed]>=2022.3.0->dataprep) (7.1.0)\n","Requirement already satisfied: Werkzeug>=2.2.2 in /usr/local/lib/python3.10/dist-packages (from flask<3,>=2->dataprep) (3.0.2)\n","Requirement already satisfied: itsdangerous>=2.0 in /usr/local/lib/python3.10/dist-packages (from flask<3,>=2->dataprep) (2.2.0)\n","Requirement already satisfied: Six in /usr/local/lib/python3.10/dist-packages (from flask_cors<4.0.0,>=3.0.10->dataprep) (1.16.0)\n","Requirement already satisfied: ipykernel>=4.5.1 in /usr/local/lib/python3.10/dist-packages (from ipywidgets<8.0,>=7.5->dataprep) (5.5.6)\n","Requirement already satisfied: ipython-genutils~=0.2.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets<8.0,>=7.5->dataprep) (0.2.0)\n","Requirement already satisfied: traitlets>=4.3.1 in /usr/local/lib/python3.10/dist-packages (from ipywidgets<8.0,>=7.5->dataprep) (5.7.1)\n","Requirement already satisfied: widgetsnbextension~=3.6.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets<8.0,>=7.5->dataprep) (3.6.6)\n","Requirement already satisfied: ipython>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets<8.0,>=7.5->dataprep) (7.34.0)\n","Requirement already satisfied: jupyterlab-widgets>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets<8.0,>=7.5->dataprep) (3.0.10)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2<3.1,>=3.0->dataprep) (2.1.5)\n","Requirement already satisfied: ply in /usr/local/lib/python3.10/dist-packages (from jsonpath-ng<2.0,>=1.5->dataprep) (3.11)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from nltk<4.0.0,>=3.6.7->dataprep) (1.4.0)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas<2.0,>=1.1->dataprep) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas<2.0,>=1.1->dataprep) (2023.4)\n","Requirement already satisfied: pyparsing>=2.1.4 in /usr/local/lib/python3.10/dist-packages (from pydot<2.0.0,>=1.4.2->dataprep) (3.1.2)\n","Requirement already satisfied: asttokens<3.0.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from varname<0.9.0,>=0.8.1->dataprep) (2.4.1)\n","Requirement already satisfied: executing<0.9.0,>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from varname<0.9.0,>=0.8.1->dataprep) (0.8.3)\n","Requirement already satisfied: pure_eval<1.0.0 in /usr/local/lib/python3.10/dist-packages (from varname<0.9.0,>=0.8.1->dataprep) (0.2.2)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from wordcloud<2.0,>=1.8->dataprep) (3.7.1)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.10/dist-packages (from importlib-metadata>=4.13.0->dask[array,dataframe,delayed]>=2022.3.0->dataprep) (3.18.1)\n","Requirement already satisfied: jupyter-client in /usr/local/lib/python3.10/dist-packages (from ipykernel>=4.5.1->ipywidgets<8.0,>=7.5->dataprep) (6.1.12)\n","Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets<8.0,>=7.5->dataprep) (67.7.2)\n","Requirement already satisfied: jedi>=0.16 in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets<8.0,>=7.5->dataprep) (0.19.1)\n","Requirement already satisfied: decorator in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets<8.0,>=7.5->dataprep) (4.4.2)\n","Requirement already satisfied: pickleshare in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets<8.0,>=7.5->dataprep) (0.7.5)\n","Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets<8.0,>=7.5->dataprep) (3.0.43)\n","Requirement already satisfied: pygments in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets<8.0,>=7.5->dataprep) (2.16.1)\n","Requirement already satisfied: backcall in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets<8.0,>=7.5->dataprep) (0.2.0)\n","Requirement already satisfied: matplotlib-inline in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets<8.0,>=7.5->dataprep) (0.1.7)\n","Requirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets<8.0,>=7.5->dataprep) (4.9.0)\n","Requirement already satisfied: locket in /usr/local/lib/python3.10/dist-packages (from partd>=1.2.0->dask[array,dataframe,delayed]>=2022.3.0->dataprep) (1.0.0)\n","Requirement already satisfied: notebook>=4.4.1 in /usr/local/lib/python3.10/dist-packages (from widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (6.5.5)\n","Requirement already satisfied: idna>=2.0 in /usr/local/lib/python3.10/dist-packages (from yarl<2.0,>=1.0->aiohttp<4.0,>=3.6->dataprep) (3.7)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud<2.0,>=1.8->dataprep) (1.2.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud<2.0,>=1.8->dataprep) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud<2.0,>=1.8->dataprep) (4.51.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->wordcloud<2.0,>=1.8->dataprep) (1.4.5)\n","Requirement already satisfied: parso<0.9.0,>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from jedi>=0.16->ipython>=4.0.0->ipywidgets<8.0,>=7.5->dataprep) (0.8.4)\n","Requirement already satisfied: pyzmq<25,>=17 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (23.2.1)\n","Requirement already satisfied: argon2-cffi in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (23.1.0)\n","Requirement already satisfied: jupyter-core>=4.6.1 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (5.7.2)\n","Requirement already satisfied: nbformat in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (5.10.4)\n","Requirement already satisfied: nbconvert>=5 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (6.5.4)\n","Requirement already satisfied: nest-asyncio>=1.5 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (1.6.0)\n","Requirement already satisfied: Send2Trash>=1.8.0 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (1.8.3)\n","Requirement already satisfied: terminado>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (0.18.1)\n","Requirement already satisfied: prometheus-client in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (0.20.0)\n","Requirement already satisfied: nbclassic>=0.4.7 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (1.0.0)\n","Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.10/dist-packages (from pexpect>4.3->ipython>=4.0.0->ipywidgets<8.0,>=7.5->dataprep) (0.7.0)\n","Requirement already satisfied: wcwidth in /usr/local/lib/python3.10/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=4.0.0->ipywidgets<8.0,>=7.5->dataprep) (0.2.13)\n","Requirement already satisfied: platformdirs>=2.5 in /usr/local/lib/python3.10/dist-packages (from jupyter-core>=4.6.1->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (4.2.0)\n","Requirement already satisfied: jupyter-server>=1.8 in /usr/local/lib/python3.10/dist-packages (from nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (1.24.0)\n","Requirement already satisfied: notebook-shim>=0.2.3 in /usr/local/lib/python3.10/dist-packages (from nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (0.2.4)\n","Requirement already satisfied: lxml in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (4.9.4)\n","Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (4.12.3)\n","Requirement already satisfied: bleach in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (6.1.0)\n","Requirement already satisfied: defusedxml in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (0.7.1)\n","Requirement already satisfied: entrypoints>=0.2.2 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (0.4)\n","Requirement already satisfied: jupyterlab-pygments in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (0.3.0)\n","Requirement already satisfied: mistune<2,>=0.8.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (0.8.4)\n","Requirement already satisfied: nbclient>=0.5.0 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (0.10.0)\n","Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (1.5.1)\n","Requirement already satisfied: tinycss2 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (1.2.1)\n","Requirement already satisfied: fastjsonschema>=2.15 in /usr/local/lib/python3.10/dist-packages (from nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (2.19.1)\n","Requirement already satisfied: jsonschema>=2.6 in /usr/local/lib/python3.10/dist-packages (from nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (4.19.2)\n","Requirement already satisfied: argon2-cffi-bindings in /usr/local/lib/python3.10/dist-packages (from argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (21.2.0)\n","Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (2023.12.1)\n","Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (0.34.0)\n","Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (0.18.0)\n","Requirement already satisfied: anyio<4,>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (3.7.1)\n","Requirement already satisfied: websocket-client in /usr/local/lib/python3.10/dist-packages (from jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (1.7.0)\n","Requirement already satisfied: cffi>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (1.16.0)\n","Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (2.5)\n","Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from bleach->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (0.5.1)\n","Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.10/dist-packages (from anyio<4,>=3.1.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (1.3.1)\n","Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<4,>=3.1.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (1.2.1)\n","Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8.0,>=7.5->dataprep) (2.22)\n"]}]},{"cell_type":"code","source":["from dataprep.eda import create_report\n","report_df_train = create_report(df_train).show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1NCQ-07AwgRSxh5gG0SY9gFupYZtgESil"},"id":"UgKg1JfnjYlE","executionInfo":{"status":"ok","timestamp":1713829929893,"user_tz":300,"elapsed":11527,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"df596bcf-07a9-49fc-c6a4-e145300a4010"},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","source":["# Data preparation"],"metadata":{"id":"gIYmil89oHBF"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.preprocessing import StandardScaler\n","\n","# 1. Separar la variable objetivo\n","Y_train = df_train['ropamujer']\n","df_train = df_train.drop(columns=['ropamujer'])  # Eliminar la columna 'ropamujer' del DataFrame original\n","\n","# 2. Aplicar One-Hot Encoding a la columna 'tamamer'\n","df_train = pd.get_dummies(df_train, columns=['tamamer'], prefix='tamamer')\n","\n","# 3. Estandarización de las características numéricas\n","# Asumiendo que estas son las variables numéricas que quieres estandarizar\n","features = ['edadloc', 'correo', 'paginas', 'telefono', 'impresa', 'servicio', 'nomina', 'promo']\n","\n","# Inicializar el escalador\n","scaler = StandardScaler()\n","\n","# Ajustar y transformar las características numéricas\n","df_train[features] = scaler.fit_transform(df_train[features])\n","\n","# Ver las primeras filas del DataFrame modificado para confirmar los cambios\n","print(df_train.head())\n","print(Y_train.head())  # También mostrar las primeras filas de Y_train para verificar\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mKDAJ42boGcn","executionInfo":{"status":"ok","timestamp":1713829935177,"user_tz":300,"elapsed":200,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"882069f5-24e1-4628-814a-7bbf564ca290"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["   idloc   edadloc    correo   paginas  telefono   impresa  servicio  \\\n","0   1648  0.071868 -0.231956 -1.069809 -0.270714 -0.996145 -1.031265   \n","1   1259 -1.011661  0.545987  1.378338  0.447769 -0.683706 -0.653547   \n","2    674  0.342751  0.029303 -0.630398 -0.475995  1.612939  0.630695   \n","3   1558 -0.469896 -1.507416 -1.258128 -1.912962  1.659464 -1.031265   \n","4   1626  1.561721  0.142223 -0.693171 -0.065433 -0.782104  0.177433   \n","\n","     nomina  idmercado     promo  tamamer_Grande  tamamer_Median  \\\n","0  2.317355          8  0.030865               1               0   \n","1  0.274707          8  0.030865               1               0   \n","2 -0.800868          4  1.365575               0               1   \n","3  0.249668          7 -1.303845               1               0   \n","4  0.359653          7  0.030865               1               0   \n","\n","   tamamer_Pequeño  \n","0                0  \n","1                0  \n","2                0  \n","3                0  \n","4                0  \n","0    43747.69227\n","1    37483.68999\n","2    57522.99548\n","3    50338.06208\n","4    45675.55005\n","Name: ropamujer, dtype: float64\n"]}]},{"cell_type":"markdown","source":["# 1 round Regressions without data partition"],"metadata":{"id":"aCoAbMa12uNy"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n"],"metadata":{"id":"lLhEyTRkK9K0","executionInfo":{"status":"ok","timestamp":1713829941439,"user_tz":300,"elapsed":280,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}}},"execution_count":10,"outputs":[]},{"cell_type":"markdown","source":["Simple"],"metadata":{"id":"VSWGMmpfL38i"}},{"cell_type":"code","source":["# Entrenamos la regresión lineal simple\n","simple_lr = LinearRegression()\n","simple_lr.fit(df_train[['servicio']], Y_train)\n","\n","# Realizamos predicciones en el conjunto de entrenamiento para evaluar el modelo\n","simple_predictions_train = simple_lr.predict(df_train[['servicio']])\n","\n","# Evaluamos el modelo en el conjunto de entrenamiento (esto es solo para ver cómo se desempeña en los datos de entrenamiento)\n","from sklearn.metrics import mean_squared_error, r2_score\n","simple_mse_train = mean_squared_error(Y_train, simple_predictions_train)\n","simple_r2_train = r2_score(Y_train, simple_predictions_train)\n","\n","print(f\"Simple Regression Training MSE: {simple_mse_train}\")\n","print(f\"Simple Regression Training R2: {simple_r2_train}\")\n","\n","# Ahora hacemos predicciones en el conjunto de prueba (sin Y_test para evaluar)\n","simple_predictions_test = simple_lr.predict(df_test[['servicio']])\n","\n","# Imprimimos las primeras 10 predicciones como muestra\n","print(\"Simple Regression Test Predictions:\")\n","print(simple_predictions_test[:10])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wXRwPvYFRzln","executionInfo":{"status":"ok","timestamp":1713829942920,"user_tz":300,"elapsed":183,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"c79efbfb-0e46-4c6f-9d69-0233cb7f70f7"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Simple Regression Training MSE: 219928646.65928257\n","Simple Regression Training R2: 0.2861772980049433\n","Simple Regression Test Predictions:\n","[304507.04988635 257557.29635423 548645.7682534  295117.09917993\n"," 257557.29635423 295117.09917993 360846.7541249  389016.60624418\n"," 398406.5569506  379626.65553775]\n"]}]},{"cell_type":"markdown","source":["Multiple"],"metadata":{"id":"vHBG6BlrSOGJ"}},{"cell_type":"code","source":["# Para la regresión lineal múltiple, asumiremos que además de 'servicio', deseas usar 'impresa' y 'nomina' como predictores.\n","multiple_lr = LinearRegression()\n","multiple_lr.fit(df_train[['servicio', 'impresa', 'nomina']], Y_train)\n","\n","# Realizamos predicciones en el conjunto de entrenamiento para evaluar el modelo\n","multiple_predictions_train = multiple_lr.predict(df_train[['servicio', 'impresa', 'nomina']])\n","\n","# Evaluamos el modelo en el conjunto de entrenamiento\n","multiple_mse_train = mean_squared_error(Y_train, multiple_predictions_train)\n","multiple_r2_train = r2_score(Y_train, multiple_predictions_train)\n","\n","print(f\"Multiple Regression Training MSE: {multiple_mse_train}\")\n","print(f\"Multiple Regression Training R2: {multiple_r2_train}\")\n","\n","# Hacemos predicciones en el conjunto de prueba\n","multiple_predictions_test = multiple_lr.predict(df_test[['servicio', 'impresa', 'nomina']])\n","\n","# Imprimimos las primeras 10 predicciones como muestra\n","print(\"Multiple Regression Test Predictions:\")\n","print(multiple_predictions_test[:10])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"prelr4cIR-gj","executionInfo":{"status":"ok","timestamp":1713829945465,"user_tz":300,"elapsed":188,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"3dbf583e-6be5-4664-ae64-f407061d2a5d"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Multiple Regression Training MSE: 183146084.29846013\n","Multiple Regression Training R2: 0.40556250975219044\n","Multiple Regression Test Predictions:\n","[1.62328105e+08 1.28577554e+08 1.50110350e+08 2.04564263e+08\n"," 1.66670102e+08 1.58947830e+08 1.77685847e+08 1.93875457e+08\n"," 1.92909984e+08 2.10328744e+08]\n"]}]},{"cell_type":"markdown","source":["# 2 round regressions with crossvalidation and data partition"],"metadata":{"id":"IgdsiCYYcu0m"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split, GridSearchCV\n","from sklearn.linear_model import Ridge, Lasso, ElasticNet\n","from sklearn.metrics import mean_squared_error, r2_score\n","from sklearn.preprocessing import StandardScaler"],"metadata":{"id":"mQRQTtzid8lq","executionInfo":{"status":"ok","timestamp":1713829948237,"user_tz":300,"elapsed":204,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}}},"execution_count":13,"outputs":[]},{"cell_type":"markdown","source":["## Cross validation"],"metadata":{"id":"_xx2KVLkj464"}},{"cell_type":"markdown","source":["Multiple"],"metadata":{"id":"i8g5H66_eHim"}},{"cell_type":"code","source":["from sklearn.model_selection import cross_val_score\n","from sklearn.linear_model import LinearRegression\n","\n","# Crear una instancia del modelo\n","model = LinearRegression()\n","\n","# Ejecutar la validación cruzada de k-folds\n","scores = cross_val_score(model, df_train[['servicio','impresa','nomina']], Y_train, cv=10, scoring='neg_mean_squared_error')\n","\n","# Calcular el error cuadrático medio promedio (MSE)\n","mse_scores = -scores  # convertir a positivo\n","mean_mse = mse_scores.mean()\n","\n","# Calcular la desviación estándar de los MSE para ver la variabilidad entre los folds\n","std_mse = mse_scores.std()\n","\n","print(f\"Mean MSE: {mean_mse}, Standard Deviation: {std_mse}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vLx6QC4phWbb","executionInfo":{"status":"ok","timestamp":1713829951957,"user_tz":300,"elapsed":221,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"24cdc121-c072-470d-9c1e-e3abfd6da33f"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean MSE: 183938078.59484488, Standard Deviation: 16365692.250596426\n"]}]},{"cell_type":"markdown","source":["Ridge"],"metadata":{"id":"1vdg7SAmeJPT"}},{"cell_type":"code","source":["ridge = Ridge()\n","parameters_ridge = {'alpha': np.logspace(-4, 4, 20)}  # Rango de alpha\n","\n","ridge_regressor = GridSearchCV(ridge, parameters_ridge, scoring='neg_mean_squared_error', cv=10)\n","ridge_regressor.fit(df_train, Y_train)\n","\n","print(\"Best parameters for Ridge:\", ridge_regressor.best_params_)\n","print(\"Best cross-validated MSE for Ridge:\", -ridge_regressor.best_score_)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rwnkyNrWd1hZ","executionInfo":{"status":"ok","timestamp":1713829956235,"user_tz":300,"elapsed":1799,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"f0fcdc13-f8c0-4b50-c764-0054eb9e5665"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Best parameters for Ridge: {'alpha': 29.763514416313132}\n","Best cross-validated MSE for Ridge: 128708442.43201926\n"]}]},{"cell_type":"markdown","source":["Lasso"],"metadata":{"id":"NS6WhU-GffWA"}},{"cell_type":"code","source":["# Definir el modelo Lasso\n","lasso = Lasso(alpha=0.01, max_iter=10000)  # Ajusta el valor de alpha según sea necesario\n","\n","# Ejecutar la validación cruzada\n","scores = cross_val_score(lasso, df_train, Y_train, scoring='neg_mean_squared_error', cv=10)\n","\n","# Convertir scores a positivos\n","mse_scores = -scores\n","\n","# Mostrar resultados\n","print(\"MSE scores:\", mse_scores)\n","print(\"Mean MSE:\", mse_scores.mean())\n","print(\"Standard Deviation of MSE:\", mse_scores.std())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xbI7ZzRalHte","executionInfo":{"status":"ok","timestamp":1713829959282,"user_tz":300,"elapsed":754,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"c67fe4c6-e143-4d56-d969-a5ecd7235363"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["MSE scores: [1.10064607e+08 1.28455860e+08 1.24850511e+08 1.29449195e+08\n"," 1.18282174e+08 1.26610338e+08 1.38431743e+08 1.29415433e+08\n"," 1.56390772e+08 1.25525238e+08]\n","Mean MSE: 128747586.98660007\n","Standard Deviation of MSE: 11608915.05061654\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import GridSearchCV\n","\n","# Definir rango de alphas a probar\n","alpha_range = np.logspace(-4, 1, 50)\n","\n","# Configurar GridSearchCV\n","grid = GridSearchCV(estimator=Lasso(max_iter=10000), param_grid={'alpha': alpha_range}, scoring='neg_mean_squared_error', cv=10, verbose=1)\n","\n","# Ejecutar GridSearchCV\n","grid.fit(df_train, Y_train)\n","\n","# Mejores parámetros y MSE\n","print(\"Best alpha:\", grid.best_params_)\n","print(\"Best cross-validated MSE:\", -grid.best_score_)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Rpx9sU_zldT6","executionInfo":{"status":"ok","timestamp":1713829982342,"user_tz":300,"elapsed":19806,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"0e1524fc-8b1c-46a2-fd24-5cf0e1326a15"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 10 folds for each of 50 candidates, totalling 500 fits\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.504e+09, tolerance: 4.435e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.475e+09, tolerance: 4.472e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.504e+09, tolerance: 4.435e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.475e+09, tolerance: 4.472e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.504e+09, tolerance: 4.435e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.475e+09, tolerance: 4.472e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.504e+09, tolerance: 4.435e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.475e+09, tolerance: 4.472e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.504e+09, tolerance: 4.435e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.475e+09, tolerance: 4.472e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.504e+09, tolerance: 4.435e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.475e+09, tolerance: 4.472e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.504e+09, tolerance: 4.435e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.475e+09, tolerance: 4.472e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.504e+09, tolerance: 4.435e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.475e+09, tolerance: 4.472e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.504e+09, tolerance: 4.435e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.475e+09, tolerance: 4.472e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.504e+09, tolerance: 4.435e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.475e+09, tolerance: 4.472e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.504e+09, tolerance: 4.435e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.475e+09, tolerance: 4.472e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.504e+09, tolerance: 4.435e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.475e+09, tolerance: 4.472e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.504e+09, tolerance: 4.435e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.504e+09, tolerance: 4.435e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.504e+09, tolerance: 4.435e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.504e+09, tolerance: 4.435e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.504e+09, tolerance: 4.435e+07\n","  model = cd_fast.enet_coordinate_descent(\n"]},{"output_type":"stream","name":"stdout","text":["Best alpha: {'alpha': 10.0}\n","Best cross-validated MSE: 128599768.10044575\n"]}]},{"cell_type":"markdown","source":["Elastic net"],"metadata":{"id":"qPTd5heBhAxD"}},{"cell_type":"code","source":["import numpy as np\n","from sklearn.linear_model import ElasticNetCV\n"],"metadata":{"id":"qdD3SN8Qmx5b","executionInfo":{"status":"ok","timestamp":1713829984185,"user_tz":300,"elapsed":251,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["# Definir el modelo Elastic Net CV\n","# La configuración de alphas y l1_ratios se puede ajustar según la necesidad específica del análisis\n","alphas = np.logspace(-4, 1, 50)  # Rango de alpha\n","l1_ratios = np.linspace(0.01, 1, 25)  # Rango de l1_ratio desde casi Ridge (0.01) hasta Lasso (1)\n","\n","elastic_net_cv = ElasticNetCV(alphas=alphas, l1_ratio=l1_ratios, cv=10, max_iter=10000, random_state=42)\n","elastic_net_cv.fit(df_train, Y_train)\n","\n","# Mejores parámetros\n","print(\"Best alpha:\", elastic_net_cv.alpha_)\n","print(\"Best l1_ratio:\", elastic_net_cv.l1_ratio_)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kDkMsbtbhCgJ","executionInfo":{"status":"ok","timestamp":1713829992926,"user_tz":300,"elapsed":7846,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"2b2f7973-5d14-4724-bbd1-78d7f791e176"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Best alpha: 10.0\n","Best l1_ratio: 1.0\n"]}]},{"cell_type":"code","source":["# Predicciones en el conjunto de entrenamiento\n","train_predictions = elastic_net_cv.predict(df_train)\n","train_mse = mean_squared_error(Y_train, train_predictions)\n","train_r2 = elastic_net_cv.score(df_train, Y_train)  # Esto devuelve el R^2\n","\n","print(f\"Training MSE: {train_mse}\")\n","print(f\"Training R^2: {train_r2}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2ZtQ7Dmwmn6K","executionInfo":{"status":"ok","timestamp":1713829994797,"user_tz":300,"elapsed":246,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"5041d7d4-1923-416f-b41b-75617509f0db"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Training MSE: 126429004.03209789\n","Training R^2: 0.5896492128715287\n"]}]},{"cell_type":"code","source":["# Asegurándose de que X_test está escalado de la misma manera que X_train\n","X_test_scaled = scaler.transform(df_test)  # Suponiendo que X_test está definido\n","\n","# Predicciones sobre el conjunto de prueba\n","# test_predictions = elastic_net_cv.predict(df_test)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":454},"id":"6CxTtl5gmrqe","executionInfo":{"status":"error","timestamp":1713830000177,"user_tz":300,"elapsed":228,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"0e410b14-fe02-4a81-c206-b9dcdd6be63a"},"execution_count":22,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"The feature names should match those that were passed during fit.\nFeature names unseen at fit time:\n- idloc\n- idmercado\n- ropamujer\n- tamamer\n","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-22-1ac6a024ce51>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Asegurándose de que X_test está escalado de la misma manera que X_train\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mX_test_scaled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mscaler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf_test\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Suponiendo que X_test está definido\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Predicciones sobre el conjunto de prueba\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# test_predictions = elastic_net_cv.predict(df_test)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/_set_output.py\u001b[0m in \u001b[0;36mwrapped\u001b[0;34m(self, X, *args, **kwargs)\u001b[0m\n\u001b[1;32m    138\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mwraps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    139\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mwrapped\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 140\u001b[0;31m         \u001b[0mdata_to_wrap\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    141\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_to_wrap\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    142\u001b[0m             \u001b[0;31m# only wrap the first output for cross decomposition\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_data.py\u001b[0m in \u001b[0;36mtransform\u001b[0;34m(self, X, copy)\u001b[0m\n\u001b[1;32m    990\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    991\u001b[0m         \u001b[0mcopy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcopy\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mcopy\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 992\u001b[0;31m         X = self._validate_data(\n\u001b[0m\u001b[1;32m    993\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    994\u001b[0m             \u001b[0mreset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    546\u001b[0m             \u001b[0mvalidated\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    547\u001b[0m         \"\"\"\n\u001b[0;32m--> 548\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_feature_names\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mreset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    549\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    550\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0my\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_tags\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"requires_y\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_check_feature_names\u001b[0;34m(self, X, reset)\u001b[0m\n\u001b[1;32m    479\u001b[0m                 )\n\u001b[1;32m    480\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 481\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmessage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    482\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    483\u001b[0m     def _validate_data(\n","\u001b[0;31mValueError\u001b[0m: The feature names should match those that were passed during fit.\nFeature names unseen at fit time:\n- idloc\n- idmercado\n- ropamujer\n- tamamer\n"]}]},{"cell_type":"markdown","source":["## Particion of db_test"],"metadata":{"id":"-7zpjzehkBqe"}},{"cell_type":"code","source":["# Dividir los datos de entrenamiento en un nuevo conjunto de entrenamiento y un conjunto de validación\n","X_train_new, X_val, Y_train_new, Y_val = train_test_split(df_train, Y_train, test_size=0.2, random_state=42)\n"],"metadata":{"id":"w1SevurgcO57","executionInfo":{"status":"ok","timestamp":1713830018911,"user_tz":300,"elapsed":311,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["X_train_new"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"aMyIKLeiLtl-","executionInfo":{"status":"ok","timestamp":1713830020152,"user_tz":300,"elapsed":206,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"4bffd99c-be1c-4ca6-8612-e1d6a39d1f03"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      idloc   edadloc    correo   paginas  telefono   impresa  servicio  \\\n","1532   1352  0.613633 -2.318694 -1.195355 -1.912962 -1.646572  1.083957   \n","628    1966  1.155398 -0.352377 -0.442079 -0.373355 -0.280726  0.781782   \n","693     664  0.207310 -0.311542 -0.818717  0.139848 -1.494275  0.857326   \n","705     209 -0.334455 -0.403212 -0.379306 -0.475995 -0.966734  0.555151   \n","497    1484  1.697163 -0.286541  0.122878 -0.681276 -0.943799  0.026346   \n","...     ...       ...       ...       ...       ...       ...       ...   \n","1130    646 -1.011661 -0.018199 -0.128214  0.139848  0.537041 -0.200285   \n","1294    272  1.426280  0.376398  1.441111  0.858331 -1.263416  0.706238   \n","860    1660 -0.334455  0.182641 -0.818717 -0.373355  0.023575 -0.124741   \n","1459   1704  0.884516  0.010552 -0.567625 -0.578636 -0.928982  1.612762   \n","1126   1978  1.019957  1.662275  0.562289  1.576814 -0.845808 -0.049198   \n","\n","        nomina  idmercado     promo  tamamer_Grande  tamamer_Median  \\\n","1532 -0.510065          7  1.365575               0               0   \n","628  -0.492110          3  0.030865               0               0   \n","693   1.914426          1  0.030865               1               0   \n","705  -0.296740          7 -1.303845               0               1   \n","497   0.372172          3 -1.303845               1               0   \n","...        ...        ...       ...             ...             ...   \n","1130 -0.999257          2  0.030865               0               0   \n","1294 -0.902890          2  0.030865               0               0   \n","860  -0.624223          8  0.030865               0               0   \n","1459  0.988645          3  0.030865               1               0   \n","1126 -0.672763          8 -1.303845               0               1   \n","\n","      tamamer_Pequeño  \n","1532                1  \n","628                 1  \n","693                 0  \n","705                 0  \n","497                 0  \n","...               ...  \n","1130                1  \n","1294                1  \n","860                 1  \n","1459                0  \n","1126                0  \n","\n","[1280 rows x 13 columns]"],"text/html":["\n","  <div id=\"df-ee656de1-eaac-45d6-8ed8-06acdf4e1552\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>idloc</th>\n","      <th>edadloc</th>\n","      <th>correo</th>\n","      <th>paginas</th>\n","      <th>telefono</th>\n","      <th>impresa</th>\n","      <th>servicio</th>\n","      <th>nomina</th>\n","      <th>idmercado</th>\n","      <th>promo</th>\n","      <th>tamamer_Grande</th>\n","      <th>tamamer_Median</th>\n","      <th>tamamer_Pequeño</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1532</th>\n","      <td>1352</td>\n","      <td>0.613633</td>\n","      <td>-2.318694</td>\n","      <td>-1.195355</td>\n","      <td>-1.912962</td>\n","      <td>-1.646572</td>\n","      <td>1.083957</td>\n","      <td>-0.510065</td>\n","      <td>7</td>\n","      <td>1.365575</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>628</th>\n","      <td>1966</td>\n","      <td>1.155398</td>\n","      <td>-0.352377</td>\n","      <td>-0.442079</td>\n","      <td>-0.373355</td>\n","      <td>-0.280726</td>\n","      <td>0.781782</td>\n","      <td>-0.492110</td>\n","      <td>3</td>\n","      <td>0.030865</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>693</th>\n","      <td>664</td>\n","      <td>0.207310</td>\n","      <td>-0.311542</td>\n","      <td>-0.818717</td>\n","      <td>0.139848</td>\n","      <td>-1.494275</td>\n","      <td>0.857326</td>\n","      <td>1.914426</td>\n","      <td>1</td>\n","      <td>0.030865</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>705</th>\n","      <td>209</td>\n","      <td>-0.334455</td>\n","      <td>-0.403212</td>\n","      <td>-0.379306</td>\n","      <td>-0.475995</td>\n","      <td>-0.966734</td>\n","      <td>0.555151</td>\n","      <td>-0.296740</td>\n","      <td>7</td>\n","      <td>-1.303845</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>497</th>\n","      <td>1484</td>\n","      <td>1.697163</td>\n","      <td>-0.286541</td>\n","      <td>0.122878</td>\n","      <td>-0.681276</td>\n","      <td>-0.943799</td>\n","      <td>0.026346</td>\n","      <td>0.372172</td>\n","      <td>3</td>\n","      <td>-1.303845</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1130</th>\n","      <td>646</td>\n","      <td>-1.011661</td>\n","      <td>-0.018199</td>\n","      <td>-0.128214</td>\n","      <td>0.139848</td>\n","      <td>0.537041</td>\n","      <td>-0.200285</td>\n","      <td>-0.999257</td>\n","      <td>2</td>\n","      <td>0.030865</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1294</th>\n","      <td>272</td>\n","      <td>1.426280</td>\n","      <td>0.376398</td>\n","      <td>1.441111</td>\n","      <td>0.858331</td>\n","      <td>-1.263416</td>\n","      <td>0.706238</td>\n","      <td>-0.902890</td>\n","      <td>2</td>\n","      <td>0.030865</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>860</th>\n","      <td>1660</td>\n","      <td>-0.334455</td>\n","      <td>0.182641</td>\n","      <td>-0.818717</td>\n","      <td>-0.373355</td>\n","      <td>0.023575</td>\n","      <td>-0.124741</td>\n","      <td>-0.624223</td>\n","      <td>8</td>\n","      <td>0.030865</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1459</th>\n","      <td>1704</td>\n","      <td>0.884516</td>\n","      <td>0.010552</td>\n","      <td>-0.567625</td>\n","      <td>-0.578636</td>\n","      <td>-0.928982</td>\n","      <td>1.612762</td>\n","      <td>0.988645</td>\n","      <td>3</td>\n","      <td>0.030865</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1126</th>\n","      <td>1978</td>\n","      <td>1.019957</td>\n","      <td>1.662275</td>\n","      <td>0.562289</td>\n","      <td>1.576814</td>\n","      <td>-0.845808</td>\n","      <td>-0.049198</td>\n","      <td>-0.672763</td>\n","      <td>8</td>\n","      <td>-1.303845</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1280 rows × 13 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ee656de1-eaac-45d6-8ed8-06acdf4e1552')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ee656de1-eaac-45d6-8ed8-06acdf4e1552 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ee656de1-eaac-45d6-8ed8-06acdf4e1552');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-77e326a1-75ac-4261-8c8a-96b7a8a6b251\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-77e326a1-75ac-4261-8c8a-96b7a8a6b251')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-77e326a1-75ac-4261-8c8a-96b7a8a6b251 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_4a54cfb4-57b9-408f-bcf1-0c3dd333bb6d\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X_train_new')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_4a54cfb4-57b9-408f-bcf1-0c3dd333bb6d button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('X_train_new');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_train_new","summary":"{\n  \"name\": \"X_train_new\",\n  \"rows\": 1280,\n  \"fields\": [\n    {\n      \"column\": \"idloc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 574,\n        \"min\": 1,\n        \"max\": 1998,\n        \"num_unique_values\": 1280,\n        \"samples\": [\n          557,\n          1446,\n          1495\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"edadloc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9910249855661828,\n        \"min\": -1.2825432591477264,\n        \"max\": 1.968044896833575,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          1.2908390310041373,\n          -0.8762197396500637,\n          0.6136331651746995\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"correo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.004058685425678,\n        \"min\": -3.938331907291997,\n        \"max\": 1.9418677610821133,\n        \"num_unique_values\": 1149,\n        \"samples\": [\n          -0.9903151376103905,\n          0.1905582935242629,\n          -0.1982049073397567\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"paginas\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0114237864430757,\n        \"min\": -2.1369496772352394,\n        \"max\": 1.8177489984149058,\n        \"num_unique_values\": 64,\n        \"samples\": [\n          -1.9486306926804706,\n          -1.3836737390161642,\n          -1.1953547544613954\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"telefono\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0118584190005033,\n        \"min\": -2.118242704692931,\n        \"max\": 2.192657045620968,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          -1.19447847248281,\n          1.782095164638692,\n          1.0636118729197088\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"impresa\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9997768745633986,\n        \"min\": -1.7239629058321364,\n        \"max\": 1.790420089515387,\n        \"num_unique_values\": 1280,\n        \"samples\": [\n          -0.38911235670076216,\n          -0.764397805933343,\n          -1.5041497480347141\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"servicio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9939259173865563,\n        \"min\": -2.1644191081064537,\n        \"max\": 1.8393926882250171,\n        \"num_unique_values\": 54,\n        \"samples\": [\n          -1.1823520637232627,\n          -1.3334393013206767,\n          1.1595001190366543\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nomina\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9835749920811921,\n        \"min\": -1.2202146003412109,\n        \"max\": 6.137709561218327,\n        \"num_unique_values\": 1261,\n        \"samples\": [\n          -0.0722686113743175,\n          -0.7642429418517303,\n          0.4377343708090033\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"idmercado\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          6,\n          3,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"promo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9906715766018638,\n        \"min\": -1.3038448308104598,\n        \"max\": 1.36557516828965,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1.36557516828965,\n          0.030865168739595102,\n          -1.3038448308104598\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tamamer_Grande\",\n      \"properties\": {\n        \"dtype\": \"uint8\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tamamer_Median\",\n      \"properties\": {\n        \"dtype\": \"uint8\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tamamer_Peque\\u00f1o\",\n      \"properties\": {\n        \"dtype\": \"uint8\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["X_val"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"YBD0tvlTLzaJ","executionInfo":{"status":"ok","timestamp":1713830024038,"user_tz":300,"elapsed":208,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"2625fe5a-665e-4bde-8652-4dcd26c9d54f"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      idloc   edadloc    correo   paginas  telefono   impresa  servicio  \\\n","526    1263 -0.876220 -0.365711 -1.007036 -0.989198  0.585435  1.839393   \n","354    1545 -0.605337  0.478901  1.001700  0.858331  1.785837  1.159500   \n","168      43 -0.740779 -0.453630 -0.379306 -0.886557  0.205257 -0.200285   \n","135    1377  1.561721 -0.475714  0.185651 -0.065433 -1.333802  1.461675   \n","937     515  0.342751 -0.008615 -0.065441  0.242488 -1.030958  1.839393   \n","...     ...       ...       ...       ...       ...       ...       ...   \n","1074   1641 -1.282543  0.338063  0.750608  1.474174  0.329554 -0.955721   \n","1315    369  1.561721 -0.616969 -0.065441  0.139848 -0.671650  0.101889   \n","383     588 -1.147102 -0.283208 -0.567625  0.242488 -0.454786 -1.635614   \n","1273    301 -0.740779  0.292645  1.629430  0.345129  0.406367  1.235044   \n","700     525 -1.011661  1.249344  1.190019  1.063612 -1.326092 -1.635614   \n","\n","        nomina  idmercado     promo  tamamer_Grande  tamamer_Median  \\\n","526   0.180536          1  0.030865               1               0   \n","354   0.931429          1 -1.303845               1               0   \n","168  -0.290261          3 -1.303845               0               1   \n","135   0.962179          8 -1.303845               1               0   \n","937   0.367999          3 -1.303845               1               0   \n","...        ...        ...       ...             ...             ...   \n","1074 -0.798013          6  1.365575               0               1   \n","1315  1.932107          1  0.030865               1               0   \n","383   1.751289          9 -1.303845               1               0   \n","1273 -0.119491          5  1.365575               0               1   \n","700   0.908532          9  0.030865               1               0   \n","\n","      tamamer_Pequeño  \n","526                 0  \n","354                 0  \n","168                 0  \n","135                 0  \n","937                 0  \n","...               ...  \n","1074                0  \n","1315                0  \n","383                 0  \n","1273                0  \n","700                 0  \n","\n","[320 rows x 13 columns]"],"text/html":["\n","  <div id=\"df-d8700044-cea2-4adf-859f-ace082d037e1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>idloc</th>\n","      <th>edadloc</th>\n","      <th>correo</th>\n","      <th>paginas</th>\n","      <th>telefono</th>\n","      <th>impresa</th>\n","      <th>servicio</th>\n","      <th>nomina</th>\n","      <th>idmercado</th>\n","      <th>promo</th>\n","      <th>tamamer_Grande</th>\n","      <th>tamamer_Median</th>\n","      <th>tamamer_Pequeño</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>526</th>\n","      <td>1263</td>\n","      <td>-0.876220</td>\n","      <td>-0.365711</td>\n","      <td>-1.007036</td>\n","      <td>-0.989198</td>\n","      <td>0.585435</td>\n","      <td>1.839393</td>\n","      <td>0.180536</td>\n","      <td>1</td>\n","      <td>0.030865</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>354</th>\n","      <td>1545</td>\n","      <td>-0.605337</td>\n","      <td>0.478901</td>\n","      <td>1.001700</td>\n","      <td>0.858331</td>\n","      <td>1.785837</td>\n","      <td>1.159500</td>\n","      <td>0.931429</td>\n","      <td>1</td>\n","      <td>-1.303845</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>168</th>\n","      <td>43</td>\n","      <td>-0.740779</td>\n","      <td>-0.453630</td>\n","      <td>-0.379306</td>\n","      <td>-0.886557</td>\n","      <td>0.205257</td>\n","      <td>-0.200285</td>\n","      <td>-0.290261</td>\n","      <td>3</td>\n","      <td>-1.303845</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>135</th>\n","      <td>1377</td>\n","      <td>1.561721</td>\n","      <td>-0.475714</td>\n","      <td>0.185651</td>\n","      <td>-0.065433</td>\n","      <td>-1.333802</td>\n","      <td>1.461675</td>\n","      <td>0.962179</td>\n","      <td>8</td>\n","      <td>-1.303845</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>937</th>\n","      <td>515</td>\n","      <td>0.342751</td>\n","      <td>-0.008615</td>\n","      <td>-0.065441</td>\n","      <td>0.242488</td>\n","      <td>-1.030958</td>\n","      <td>1.839393</td>\n","      <td>0.367999</td>\n","      <td>3</td>\n","      <td>-1.303845</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1074</th>\n","      <td>1641</td>\n","      <td>-1.282543</td>\n","      <td>0.338063</td>\n","      <td>0.750608</td>\n","      <td>1.474174</td>\n","      <td>0.329554</td>\n","      <td>-0.955721</td>\n","      <td>-0.798013</td>\n","      <td>6</td>\n","      <td>1.365575</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1315</th>\n","      <td>369</td>\n","      <td>1.561721</td>\n","      <td>-0.616969</td>\n","      <td>-0.065441</td>\n","      <td>0.139848</td>\n","      <td>-0.671650</td>\n","      <td>0.101889</td>\n","      <td>1.932107</td>\n","      <td>1</td>\n","      <td>0.030865</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>383</th>\n","      <td>588</td>\n","      <td>-1.147102</td>\n","      <td>-0.283208</td>\n","      <td>-0.567625</td>\n","      <td>0.242488</td>\n","      <td>-0.454786</td>\n","      <td>-1.635614</td>\n","      <td>1.751289</td>\n","      <td>9</td>\n","      <td>-1.303845</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1273</th>\n","      <td>301</td>\n","      <td>-0.740779</td>\n","      <td>0.292645</td>\n","      <td>1.629430</td>\n","      <td>0.345129</td>\n","      <td>0.406367</td>\n","      <td>1.235044</td>\n","      <td>-0.119491</td>\n","      <td>5</td>\n","      <td>1.365575</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>700</th>\n","      <td>525</td>\n","      <td>-1.011661</td>\n","      <td>1.249344</td>\n","      <td>1.190019</td>\n","      <td>1.063612</td>\n","      <td>-1.326092</td>\n","      <td>-1.635614</td>\n","      <td>0.908532</td>\n","      <td>9</td>\n","      <td>0.030865</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>320 rows × 13 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d8700044-cea2-4adf-859f-ace082d037e1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d8700044-cea2-4adf-859f-ace082d037e1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d8700044-cea2-4adf-859f-ace082d037e1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-21a19b2c-2148-4cc6-a135-adb1a732b1cf\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-21a19b2c-2148-4cc6-a135-adb1a732b1cf')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-21a19b2c-2148-4cc6-a135-adb1a732b1cf button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_e844fcc6-d23a-4f02-9f3d-cc15cb403864\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X_val')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_e844fcc6-d23a-4f02-9f3d-cc15cb403864 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('X_val');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_val","summary":"{\n  \"name\": \"X_val\",\n  \"rows\": 320,\n  \"fields\": [\n    {\n      \"column\": \"idloc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 590,\n        \"min\": 8,\n        \"max\": 1986,\n        \"num_unique_values\": 320,\n        \"samples\": [\n          1472,\n          57,\n          1527\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"edadloc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.038085348009271,\n        \"min\": -1.2825432591477264,\n        \"max\": 1.968044896833575,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          1.1553978578382496,\n          -1.1471020859818388,\n          -0.8762197396500637\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"correo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9857647946774931,\n        \"min\": -3.7554090292863114,\n        \"max\": 1.9227004435689892,\n        \"num_unique_values\": 303,\n        \"samples\": [\n          0.43348320896233733,\n          0.8476639395720217,\n          1.5343539235204722\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"paginas\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9560824337242687,\n        \"min\": -2.0741766823836496,\n        \"max\": 1.8177489984149058,\n        \"num_unique_values\": 62,\n        \"samples\": [\n          0.6878350910862928,\n          -1.571992723570933,\n          -1.0070357699066266\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"telefono\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9533200518766803,\n        \"min\": -2.118242704692931,\n        \"max\": 2.192657045620968,\n        \"num_unique_values\": 42,\n        \"samples\": [\n          1.782095164638692,\n          -0.16807377002711957,\n          1.1662523431652778\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"impresa\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0029369145198197,\n        \"min\": -1.7138288353319322,\n        \"max\": 1.7911305785888267,\n        \"num_unique_values\": 320,\n        \"samples\": [\n          -1.630687211933998,\n          -0.21872139492399595,\n          0.4783051907340697\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"servicio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0263388530008333,\n        \"min\": -2.1644191081064537,\n        \"max\": 1.8393926882250171,\n        \"num_unique_values\": 52,\n        \"samples\": [\n          -1.4845265389180906,\n          1.7638490694263103,\n          -2.0133318705090395\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nomina\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0621936500283697,\n        \"min\": -1.274081194389643,\n        \"max\": 4.43835853918889,\n        \"num_unique_values\": 317,\n        \"samples\": [\n          -0.8044918852130969,\n          -0.9222186717980495,\n          0.664457272772282\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"idmercado\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          4,\n          3,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"promo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0379640447398213,\n        \"min\": -1.3038448308104598,\n        \"max\": 1.36557516828965,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.030865168739595102,\n          -1.3038448308104598,\n          1.36557516828965\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tamamer_Grande\",\n      \"properties\": {\n        \"dtype\": \"uint8\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tamamer_Median\",\n      \"properties\": {\n        \"dtype\": \"uint8\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tamamer_Peque\\u00f1o\",\n      \"properties\": {\n        \"dtype\": \"uint8\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":25}]},{"cell_type":"markdown","source":["Simple"],"metadata":{"id":"eFwIilSOvcyK"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_squared_error\n","\n","# Entrenar el modelo en el nuevo conjunto de entrenamiento\n","model.fit(X_train_new[['servicio']], Y_train_new)\n","\n","# Evaluar el modelo en el conjunto de validación\n","predictions_val = model.predict(X_val[['servicio']])\n","mse_val = mean_squared_error(Y_val, predictions_val)\n","train_r2 = r2_score(Y_val, predictions_val)\n","\n","\n","print(f\"Validation MSE: {mse_val}\")\n","print(f\"Training R^2: {train_r2}\")\n","\n","mse_simple= mse_val\n","r2_simple = train_r2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DjxTc4C0vdrG","executionInfo":{"status":"ok","timestamp":1713830027794,"user_tz":300,"elapsed":195,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"72d0c18c-10e7-4c13-88ad-4710fd425c8d"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Validation MSE: 199590151.70274568\n","Training R^2: 0.2865015787007833\n"]}]},{"cell_type":"markdown","source":["Multiple: [[...]]"],"metadata":{"id":"A_gzzP8WcThN"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_squared_error\n","\n","\n","# Entrenar el modelo en el nuevo conjunto de entrenamiento\n","model.fit(X_train_new, Y_train_new)\n","\n","# Evaluar el modelo en el conjunto de validación\n","predictions_val = model.predict(X_val)\n","mse_val = mean_squared_error(Y_val, predictions_val)\n","train_r2 = r2_score(Y_val, predictions_val)\n","\n","print(f\"Validation MSE: {mse_val}\")\n","print(f\"Training R^2: {train_r2}\")\n","\n","mse_multiple = mse_val\n","r2_multiple = train_r2\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zxRCugxLi3Wu","executionInfo":{"status":"ok","timestamp":1713830029830,"user_tz":300,"elapsed":190,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"467d3953-8090-407a-914e-f34608fc072d"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["Validation MSE: 112640495.40538025\n","Training R^2: 0.5973307552479059\n"]}]},{"cell_type":"markdown","source":["Multiple: [['servicio','impresa','nomina']]"],"metadata":{"id":"hYGPWJTFc_1r"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_squared_error\n","\n","# Entrenar el modelo en el nuevo conjunto de entrenamiento\n","model.fit(X_train_new[['servicio','impresa','nomina']], Y_train_new)\n","\n","# Evaluar el modelo en el conjunto de validación\n","predictions_val = model.predict(X_val[['servicio','impresa','nomina']])\n","mse_val = mean_squared_error(Y_val, predictions_val)\n","train_r2 = r2_score(Y_val, predictions_val)\n","\n","\n","print(f\"Validation MSE: {mse_val}\")\n","print(f\"Training R^2: {train_r2}\")\n","\n","mse_multiple_features = mse_val\n","r2_multiple_features = train_r2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0xc8onuidHhV","executionInfo":{"status":"ok","timestamp":1713830032381,"user_tz":300,"elapsed":208,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"60726585-9efb-44d6-f6c1-9b201d01f192"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["Validation MSE: 166690430.15000683\n","Training R^2: 0.40411208798093656\n"]}]},{"cell_type":"markdown","source":["Ridge"],"metadata":{"id":"Ztrv1rYuSRLj"}},{"cell_type":"code","source":["# Definir el modelo Ridge con búsqueda de hiperparámetros\n","ridge = Ridge()\n","parameters = {'alpha': np.logspace(-4, 4, 20)}\n","ridge_regressor = GridSearchCV(ridge, parameters, scoring='neg_mean_squared_error', cv=5)\n","ridge_regressor.fit(X_train_new, Y_train_new)\n","\n","# Mejor alpha y MSE correspondiente\n","print(\"Best alpha:\", ridge_regressor.best_params_)\n","print(\"Best MSE:\", -ridge_regressor.best_score_)\n","\n","# Predicción y evaluación\n","ridge_predictions = ridge_regressor.predict(X_val)\n","ridge_mse = mean_squared_error(Y_val, ridge_predictions)\n","train_r2 = r2_score(Y_val, ridge_predictions)\n","\n","print(\"Ridge Regression Test MSE:\", ridge_mse)\n","print(f\"Training R^2: {train_r2}\")\n","\n","mse_ridge = ridge_mse\n","r2_ridge = train_r2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fybCEZuFcfh6","executionInfo":{"status":"ok","timestamp":1713830035651,"user_tz":300,"elapsed":1147,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"625060c3-dde2-45f5-ad5f-cc81997930b9"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["Best alpha: {'alpha': 11.288378916846883}\n","Best MSE: 133296944.22973926\n","Ridge Regression Test MSE: 112367862.88919532\n","Training R^2: 0.5983053668118197\n"]}]},{"cell_type":"markdown","source":["Lasso"],"metadata":{"id":"jS6zu84LSTSN"}},{"cell_type":"code","source":["from sklearn.linear_model import Lasso\n","\n","# Asumiendo que X_train_scaled y Y_train son tus datos de entrenamiento\n","lasso = Lasso(alpha=0.1)\n","lasso.fit(X_train_new, Y_train_new)\n","\n","# Coeficientes del modelo\n","print(\"Coeficientes de Lasso:\", lasso.coef_)\n","\n","# Identificar características seleccionadas (coeficientes que no son cero)\n","selected_features = [f for f, c in zip(df_train.columns, lasso.coef_) if c != 0]\n","print(\"Características seleccionadas por Lasso:\", selected_features)\n","\n","# Predicciones y evaluación\n","train_predictions = lasso.predict(X_val)\n","train_mse = mean_squared_error(Y_val, train_predictions)\n","train_r2 = r2_score(Y_val, train_predictions)\n","\n","print(f\"Training MSE: {train_mse}\")\n","print(f\"Training R^2: {train_r2}\")\n","\n","mse_lasso = train_mse\n","r2_lasso = train_r2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Dt3sC555SZm3","executionInfo":{"status":"ok","timestamp":1713830038255,"user_tz":300,"elapsed":205,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"6fa4bbe3-4c86-4812-f360-ad65e82ead5d"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["Coeficientes de Lasso: [-2.96438038e+00 -4.05826365e+01  4.76284218e+03  2.69668536e+03\n","  6.88135810e+02  5.99332717e+03  9.20161199e+03  2.25914257e+01\n"," -2.91424122e+01 -1.63597402e+02 -3.55701052e+02  2.51011480e+02\n"," -0.00000000e+00]\n","Características seleccionadas por Lasso: ['idloc', 'edadloc', 'correo', 'paginas', 'telefono', 'impresa', 'servicio', 'nomina', 'idmercado', 'promo', 'tamamer_Grande', 'tamamer_Median']\n","Training MSE: 112639417.3210772\n","Training R^2: 0.5973346092028315\n"]}]},{"cell_type":"markdown","source":["Elastic Net"],"metadata":{"id":"GOMQmAbxSUxP"}},{"cell_type":"code","source":["# Definir el modelo Elastic Net\n","elastic_net = ElasticNet()\n","parameters = {'alpha': np.logspace(-4, 4, 20), 'l1_ratio': [.1, .5, .7, .9, .95, 1]}\n","elastic_net_regressor = GridSearchCV(elastic_net, parameters, scoring='neg_mean_squared_error', cv=5)\n","elastic_net_regressor.fit(X_train_new, Y_train_new)\n","\n","# Mejor alpha y l1_ratio\n","print(\"Best parameters:\", elastic_net_regressor.best_params_)\n","print(\"Best MSE:\", -elastic_net_regressor.best_score_)\n","\n","# Predicción y evaluación\n","elastic_predictions = elastic_net_regressor.predict(X_val)\n","elastic_mse = mean_squared_error(Y_val, elastic_predictions)\n","train_r2 = r2_score(Y_val, elastic_predictions)\n","\n","print(\"Elastic Net Regression Test MSE:\", elastic_mse)\n","print(f\"Training R^2: {train_r2}\")\n","\n","mse_elastic_net = elastic_mse\n","r2_elastic_net = train_r2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QosgJYkRSZLS","executionInfo":{"status":"ok","timestamp":1713830049852,"user_tz":300,"elapsed":9039,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"8647e5a4-4dbb-4376-b603-77e1f1aba24a"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.724e+10, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.618e+10, tolerance: 3.178e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.232e+10, tolerance: 3.062e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.818e+10, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.747e+10, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.379e+10, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.557e+10, tolerance: 3.178e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.189e+10, tolerance: 3.062e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.783e+10, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.719e+10, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.994e+10, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.488e+10, tolerance: 3.178e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.141e+10, tolerance: 3.062e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.745e+10, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.687e+10, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.309e+10, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.176e+10, tolerance: 3.178e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.923e+10, tolerance: 3.062e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.570e+10, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.543e+10, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.547e+10, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.721e+10, tolerance: 3.178e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.605e+10, tolerance: 3.062e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.314e+10, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.331e+10, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.097e+09, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.403e+09, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.104e+09, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.540e+10, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.588e+10, tolerance: 3.178e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.210e+10, tolerance: 3.062e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.801e+10, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.734e+10, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.914e+10, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.479e+10, tolerance: 3.178e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.133e+10, tolerance: 3.062e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.739e+10, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.683e+10, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.530e+10, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.410e+10, tolerance: 3.178e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.086e+10, tolerance: 3.062e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.699e+10, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.650e+10, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.882e+10, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.103e+10, tolerance: 3.178e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.873e+10, tolerance: 3.062e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.529e+10, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.504e+10, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.401e+10, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.649e+10, tolerance: 3.178e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.555e+10, tolerance: 3.062e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.274e+10, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.298e+10, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.097e+09, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.403e+09, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.104e+09, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.295e+10, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.169e+10, tolerance: 3.178e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.191e+10, tolerance: 3.062e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.983e+10, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.071e+10, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.845e+10, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.543e+10, tolerance: 3.178e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.473e+10, tolerance: 3.062e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.214e+10, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.255e+10, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.665e+10, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.914e+10, tolerance: 3.178e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.728e+10, tolerance: 3.062e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.419e+10, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.422e+10, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.651e+10, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.847e+10, tolerance: 3.178e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.695e+10, tolerance: 3.062e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.387e+10, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.384e+10, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.030e+10, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.431e+10, tolerance: 3.178e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.404e+10, tolerance: 3.062e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.153e+10, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.171e+10, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.097e+09, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.403e+09, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.104e+09, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.545e+08, tolerance: 3.178e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.321e+08, tolerance: 3.062e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.794e+08, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.595e+08, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.356e+08, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.816e+09, tolerance: 3.178e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.028e+09, tolerance: 3.062e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.356e+10, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.553e+10, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.411e+09, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.352e+10, tolerance: 3.178e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.509e+10, tolerance: 3.062e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.511e+10, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.701e+10, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.190e+10, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.579e+10, tolerance: 3.178e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.815e+10, tolerance: 3.062e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.570e+10, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.768e+10, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.097e+09, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.403e+09, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.104e+09, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.552e+07, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.876e+09, tolerance: 3.178e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.504e+09, tolerance: 3.062e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.010e+09, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.132e+09, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.652e+09, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.493e+09, tolerance: 3.178e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.510e+10, tolerance: 3.062e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.470e+10, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.771e+10, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.097e+09, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.403e+09, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.104e+09, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.089e+08, tolerance: 3.178e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.400e+07, tolerance: 3.062e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.118e+08, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.542e+08, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.097e+09, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.403e+09, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.104e+09, tolerance: 3.314e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.097e+09, tolerance: 3.302e+07\n","  model = cd_fast.enet_coordinate_descent(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.403e+09, tolerance: 3.263e+07\n","  model = cd_fast.enet_coordinate_descent(\n"]},{"output_type":"stream","name":"stdout","text":["Best parameters: {'alpha': 206.913808111479, 'l1_ratio': 1}\n","Best MSE: 132630240.18419273\n","Elastic Net Regression Test MSE: 111705154.63743362\n","Training R^2: 0.600674428047457\n"]}]},{"cell_type":"markdown","source":["Graficos para RMSE y R2 en los modelos multiple, ridge, lasso y elastic net"],"metadata":{"id":"oitWSIaHtMrJ"}},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from math import sqrt\n","\n","# Definición de nombres de modelos y valores de MSE y R2\n","model_names = ['Simple','ML complete', 'ML features', 'Ridge', 'Lasso', 'Elastic Net']\n","mse_values = [mse_simple, mse_multiple, mse_multiple_features, mse_ridge, mse_lasso, mse_elastic_net]\n","rmse_values = [sqrt(mse) for mse in mse_values]\n","r2_values = [r2_simple, r2_multiple, r2_multiple_features, r2_ridge, r2_lasso, r2_elastic_net]\n","\n","# Gráfico\n","x = np.arange(len(model_names))  # las ubicaciones de las etiquetas\n","width = 0.2  # el ancho de las barras\n","\n","fig, ax1 = plt.subplots()\n","\n","# Barras para MSE\n","#rects1 = ax1.bar(x - width, mse_values, width, label='MSE', color='tab:blue')\n","\n","# Barras para RMSE\n","rects2 = ax1.bar(x, rmse_values, width, label='RMSE', color='tab:red')\n","\n","# Crear un segundo eje Y para los valores de R2\n","ax2 = ax1.twinx()\n","\n","# Barras para R2\n","rects3 = ax2.bar(x + width, r2_values, width, label='R2', color='tab:orange')\n","\n","# Añadiendo textos y etiquetas\n","ax1.set_xlabel('Model Type')\n","ax1.set_ylabel('RMSE', color='tab:blue')\n","ax2.set_ylabel('R2', color='tab:orange')\n","ax1.set_title('Performance Comparison of Regression Models')\n","ax1.set_xticks(x)\n","ax1.set_xticklabels(model_names)\n","ax1.tick_params(axis='y', labelcolor='tab:blue')\n","ax2.tick_params(axis='y', labelcolor='tab:orange')\n","\n","# Añadiendo leyendas\n","lines1, labels1 = ax1.get_legend_handles_labels()\n","lines2, labels2 = ax2.get_legend_handles_labels()\n","ax2.legend(lines1 + lines2, labels1 + labels2, loc='upper left')\n","\n","fig.tight_layout()  # Para ajustar layout y evitar solapamientos\n","\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"bXZkrpmF9fNY","executionInfo":{"status":"ok","timestamp":1713830053015,"user_tz":300,"elapsed":772,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"8596d517-d9d9-4629-b49a-87b1c2111482"},"execution_count":32,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# Selection model: [Lasso] predictions"],"metadata":{"id":"vo9fMl3fwnUr"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.preprocessing import StandardScaler\n","\n","# 1. Separar la variable objetivo\n","df_test = df_test.drop(columns=['ropamujer'])  # Eliminar la columna 'ropamujer' del DataFrame original\n","\n","# 2. Aplicar One-Hot Encoding a la columna 'tamamer'\n","df_test = pd.get_dummies(df_test, columns=['tamamer'], prefix='tamamer')\n","\n","# 3. Estandarización de las características numéricas\n","# Asumiendo que estas son las variables numéricas que quieres estandarizar\n","features = ['edadloc', 'correo', 'paginas', 'telefono', 'impresa', 'servicio', 'nomina', 'promo']\n","\n","# Inicializar el escalador\n","scaler = StandardScaler()\n","\n","# Ajustar y transformar las características numéricas\n","df_test[features] = scaler.fit_transform(df_test[features])\n","\n","# Ver las primeras filas del DataFrame modificado para confirmar los cambios\n","print(df_test.head())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"atr_h_S9ISNy","executionInfo":{"status":"ok","timestamp":1713830057844,"user_tz":300,"elapsed":176,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"7d46d35d-c3a1-46ee-a9d9-0e5b5fb11d96"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["   idloc   edadloc    correo   paginas  telefono   impresa  servicio  \\\n","0     22 -0.992755 -0.562007 -1.243242 -0.769420 -0.384084 -1.213599   \n","1     14  1.061221 -0.827506 -0.191744 -0.254241 -1.323637 -1.578756   \n","2     91 -0.718891  0.526265  0.426785  1.291297 -0.724261  0.685217   \n","3     32  1.335084 -0.605930 -1.923623 -1.078528  0.785089 -1.286631   \n","4     28 -0.308096 -0.547497  0.364932 -1.387636 -0.259881 -1.578756   \n","\n","     nomina  idmercado     promo  tamamer_Grande  tamamer_Median  \\\n","0 -0.203690          2  1.435035               1               0   \n","1 -0.008017          1  0.087584               1               0   \n","2 -0.385199          9 -1.259866               1               0   \n","3 -0.144435          2  1.435035               1               0   \n","4 -0.297130          2  1.435035               1               0   \n","\n","   tamamer_Pequeño  \n","0                0  \n","1                0  \n","2                0  \n","3                0  \n","4                0  \n"]}]},{"cell_type":"code","source":["from sklearn.linear_model import Lasso\n","\n","# Asumiendo que X_train_scaled y Y_train son tus datos de entrenamiento\n","lasso = Lasso(alpha=0.1)\n","lasso.fit(X_train_new, Y_train_new)\n","\n","# Coeficientes del modelo\n","print(\"Coeficientes de Lasso:\", lasso.coef_)\n","\n","# Identificar características seleccionadas (coeficientes que no son cero)\n","selected_features = [f for f, c in zip(df_train.columns, lasso.coef_) if c != 0]\n","print(\"Características seleccionadas por Lasso:\", selected_features)\n","\n","# Predicciones y evaluación\n","train_predictions = lasso.predict(df_test)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"byoVybqlwuRc","executionInfo":{"status":"ok","timestamp":1713830062557,"user_tz":300,"elapsed":231,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"1e2c4164-5223-4d1c-f5cf-e019aaa22e91"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["Coeficientes de Lasso: [-2.96438038e+00 -4.05826365e+01  4.76284218e+03  2.69668536e+03\n","  6.88135810e+02  5.99332717e+03  9.20161199e+03  2.25914257e+01\n"," -2.91424122e+01 -1.63597402e+02 -3.55701052e+02  2.51011480e+02\n"," -0.00000000e+00]\n","Características seleccionadas por Lasso: ['idloc', 'edadloc', 'correo', 'paginas', 'telefono', 'impresa', 'servicio', 'nomina', 'idmercado', 'promo', 'tamamer_Grande', 'tamamer_Median']\n"]}]},{"cell_type":"code","source":["# prompt: como puedo graficar los coeficientes\n","\n","import matplotlib.pyplot as plt\n","\n","# Obtener los coeficientes del modelo\n","coefs = lasso.coef_\n","\n","# Preparar los nombres de las características\n","feature_names = df_train.columns\n","\n","# Crear una figura y un eje\n","fig, ax = plt.subplots(figsize=(10, 5))\n","\n","# Graficar los coeficientes\n","ax.bar(feature_names, coefs, color='tab:blue', edgecolor='k')\n","\n","# Configurar etiquetas y título\n","ax.set_xlabel('Features')\n","ax.set_ylabel('Coefficients')\n","ax.set_title('Lasso Model Coefficients')\n","\n","# Rotar las etiquetas del eje X para mejorar la legibilidad\n","plt.xticks(rotation=45, ha='right')\n","\n","# Mostrar el gráfico\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":507},"id":"pepoQcyhNUVU","executionInfo":{"status":"ok","timestamp":1713830068495,"user_tz":300,"elapsed":545,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"23c4cd59-457c-4abc-b8b4-fb22e45973a2"},"execution_count":35,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Crear un DataFrame con las predicciones y un identificador de localización\n","# Asumimos que df_test ya tiene una columna 'idloc' que contiene los identificadores correctos\n","results = pd.DataFrame({\n","    'idloc': df_test['idloc'],\n","    'ropamujer': train_predictions\n","})\n","\n","# Formatear la columna 'ropamujer' para que coincida con el formato deseado\n","# Aquí, redondeamos las predicciones y las convertimos a cadena con comas como separadores decimales\n","results['ropamujer'] = results['ropamujer'].apply(lambda x: f\"{x:.2f}\".replace('.', ','))\n","\n","# Guardar el DataFrame a un archivo .csv\n","results.to_csv(\"/content/drive/MyDrive/MIA/2doSemestre/Analitica/talleresInd/taller 2/predicciones.csv\", index=False)\n"],"metadata":{"id":"yhEdowCsRgoa","executionInfo":{"status":"ok","timestamp":1713830075375,"user_tz":300,"elapsed":332,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}}},"execution_count":36,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Asumimos que 'df_test' es tu DataFrame que contiene los datos de prueba\n","# 'predictions' es un array con las predicciones de tu modelo\n","\n","# Crear un scatter plot de las predicciones contra una característica, digamos 'caracteristica_x'\n","plt.figure(figsize=(10, 6))\n","plt.scatter(df_test['servicio'], train_predictions, color='blue', label='Predicciones', alpha=0.5)\n","plt.title('Scatter Plot de Predicciones vs Servicio')\n","plt.xlabel('Servicio')\n","plt.ylabel('Predicciones de Ropa Mujer')\n","plt.legend()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"ZoY-oAywVzm5","executionInfo":{"status":"ok","timestamp":1713830077464,"user_tz":300,"elapsed":502,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"eea22a05-474b-4dfd-9c26-59f3945618c1"},"execution_count":37,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Asumimos que 'df_test' es tu DataFrame que contiene los datos de prueba\n","# 'predictions' es un array con las predicciones de tu modelo\n","\n","# Crear un scatter plot de las predicciones contra una característica, digamos 'caracteristica_x'\n","plt.figure(figsize=(10, 6))\n","plt.scatter(df_test['correo'], train_predictions, color='blue', label='Predicciones', alpha=0.5)\n","plt.title('Scatter Plot de Predicciones vs Correo')\n","plt.xlabel('Correo')\n","plt.ylabel('Predicciones de Ropa Mujer')\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"IiMQpaRMNm8d","executionInfo":{"status":"ok","timestamp":1713830366353,"user_tz":300,"elapsed":677,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"890c7644-8789-4e31-a815-b384efc56257"},"execution_count":40,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Asumimos que 'df_test' es tu DataFrame que contiene los datos de prueba\n","# 'predictions' es un array con las predicciones de tu modelo\n","\n","# Crear un scatter plot de las predicciones contra una característica, digamos 'caracteristica_x'\n","plt.figure(figsize=(10, 6))\n","plt.scatter(df_test['impresa'], train_predictions, color='blue', label='Predicciones', alpha=0.5)\n","plt.title('Scatter Plot de Predicciones vs impresa')\n","plt.xlabel('Impresa')\n","plt.ylabel('Predicciones de Ropa Mujer')\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"f8e2t4zmPoAk","executionInfo":{"status":"ok","timestamp":1713830334674,"user_tz":300,"elapsed":646,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"1c4ada96-8ee7-4be6-cc80-2c28bebdb61e"},"execution_count":39,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"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+WZkZ2djx44dePrpp7F371588sknsp/b07Pv2bMH1157LW655RbcdNNNyMrKQmVlJYYNG4YjR47glltuQWZmJtatW4d7770Xx44ds4elCoKA0aNH45dffsGtt96K7OxsfPzxx5LDIqW2vRtuuAE5OTm49957kZycjC1btmDlypWYMGGC2+sKgoDLL78c33//PaZOnYoePXrgm2++wT333IMjR47Y26fIL7/8ghUrVuD2229HQkICnnnmGVx11VUoKCiw19Xx48cxYMAAu2KRlpaGr7/+GlOnTkV5eTlmzJgBgMInp0+fjquvvtqumGzfvh0bNmzwWN7mzZtj2LBheP/99/Hggw86fffee+8hPDwcY8eOBUBK0OLFi3HjjTeiX79+KC8vx6ZNm7B582ZccMEFkurdkVOnTuHSSy/F+PHjMXbsWLzwwgsYP3483nnnHcyYMQO33norJkyYgMcffxxXX301Dh06hISEBKdrjBs3Dm3btsXixYvx66+/4plnnsGpU6fw5ptvOp23Zs0avP/++5g2bRpSU1PRtm1bRet148aNWLduHcaPH4+MjAwcPHgQL7zwAoYPH468vDzExsbKrh+GYYKMwDAMYxK+/fZbITw8XAgPDxcGDhwozJo1S/jmm2+Empoap/P27dsnhIWFCVdeeaVQX1/v9J3NZrP/v7KystE9brnlFiE2NlaoqqqyHxs1apTQpk2bRudu3LhRACAsX7680T06deokjBw5stH92rVrJ1xwwQX2Yw8++KAAQLj22msl1cH3338vABBee+01oaioSDh69Kjw5ZdfCm3bthUsFouwceNGQRAE4cCBA43K1qNHD6FZs2ZCSUmJ/di2bduEsLAw4frrr7cfe/zxxwUAwoEDB3yWp6amRmjWrJnQo0cPobq62n78pZdeEgAIw4YNsx976623hLCwMOHnn392usayZcsEAMLatWu93mvSpElCXFycUFRUJBQVFQl//PGH8PDDDwsWi0Xo3r27/bw2bdoIAISVK1c6/X7hwoVCXFycsHfvXqfjc+bMEcLDw4WCggJBEAThk08+EQAIjz32mP2curo6YejQoY3qVHx/IlLaXmlpqZCQkCD0799fOHv2rNtzxOd1bHdiuR566CGn31x99dWCxWIR/vjjD/sxAEJUVJTTsW3btgkAhGeffdZ+bOrUqUKLFi2E4uJi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/fZbXHLJJfZjnp7LHX369EFaWhqWLVuGmpoa+/HXX3+90e/HjRuHI0eO4OWXX250nbNnz6KiokLeQ8lk3LhxWL9+Pb755ptG35WWlqKurg4AcMkll6Curg4vvPCC/fv6+no8++yzPu8hpe1deOGFSEhIwOLFixulUffmqbnkkktQX19vTxUv8vTTT8NiseDiiy/2WT5HwsPDcdVVV+Gjjz7Czp07G33v2E5LSkqcvouKikLXrl0hCAJqa2u93ic5ORkjR47E+++/j//973+IiorCFVdc4XSO6/Xj4+PRsWNHv7dDUIL//Oc/Tn+L799XPStdr+Hh4Y3axbPPPuu0PQfDMPqGPWQMw5iGO++8E5WVlbjyyivRpUsX1NTUYN26dXjvvffQtm1bTJkyBQDQsWNH3HfffVi4cCGGDh2KMWPGwGq1YuPGjWjZsiUWL16MQYMGISUlBZMmTcL06dNhsVjw1ltvuRWIe/fujffeew8zZ85E3759ER8fj8suuwwdOnRAcnIyli1bhoSEBMTFxaF///5o164dXnnlFVx88cXIycnBlClT0KpVKxw5cgTff/89EhMT7euggsnjjz+Oiy++GAMHDsTUqVPtae+TkpIwb948p+cFKOX/+PHjERkZicsuu8zt+rLIyEg89NBDuOWWW3DeeefhmmuuwYEDB7B8+fJGa8j++c9/4v3338ett96K77//HoMHD0Z9fT12796N999/375vmFrcc889+Oyzz3DppZdi8uTJ6N27NyoqKrBjxw58+OGHOHjwIFJTU3HZZZdh8ODBmDNnDg4ePIiuXbtixYoVktbrSGl7iYmJePrpp3HjjTeib9++9v3ntm3bhsrKSrzxxhtur33ZZZfhH//4B+677z4cPHgQ55xzDr799lt8+umnmDFjhlMCD6k88sgj+P7779G/f3/cdNNN6Nq1K06ePInNmzfju+++w8mTJwGQEpmeno7BgwejefPmyM/Px3PPPYdRo0Y1WtPmjmuuuQbXXXcdnn/+eYwcObLRXoJdu3bF8OHD0bt3bzRp0gSbNm3Chx9+iGnTpsl+JqU4cOAALr/8clx00UVYv3493n77bUyYMMHJ6+sJJev10ksvxVtvvYWkpCR07doV69evx3fffed1iwuGYXRG0PM6MgzDqMTXX38t3HDDDUKXLl2E+Ph4ISoqSujYsaNw5513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4p05c0a33367pk+fXq/txowZo2+//dbzeOutt5qoQt/VkL5/5plntHjxYr300ksqKChQcHCw0tPTderUqSas1DeNHz9eO3bs0OrVq/Xhhx9q/fr1uu+++350u3vvvdfr3H/mmWeaodrW7e2339bMmTM1b948bd26VQMHDlR6eroOHTp00fZffPGF7r77bk2ZMkWFhYXKyMhQRkaGtm/f3syV+4b69r8khYaGep3n+/fvb8aKfUt1dbUGDhyoJUuW1Kn9vn37NHbsWF1//fXatm2bsrOzNXXqVK1ataqJK/VN9e3/Wrt27fL6fyAqKqqJKvRd69atU2ZmpjZu3KjVq1fr7NmzGj16tKqrqy+5TZO8/xuglVi6dKkJCwurU9uJEyeaW265pUnraUvq2vdut9vExMSYZ5991rPs+PHjJjAw0Lz11ltNWKHvKS4uNpLM5s2bPcs+/vhj43K5zNdff33J7a677jrz4IMPNkOFvmX48OEmMzPT83NNTY3p1q2bmT9//kXb33HHHWbs2LFey1JSUsz999/fpHX6qvr2f31+H6B+JJnly5dfts2jjz5q+vbt67XszjvvNOnp6U1YWdtQl/5fu3atkWSOHTvWLDW1JYcOHTKSzLp16y7Zpine/xkhg8/Ky8tTVFSUEhMTNX36dB09etR2ST5v3759KisrU1pammdZWFiYUlJSlJ+fb7Gy1ic/P1/h4eEaOnSoZ1laWpr8/PxUUFBw2W3//ve/KzIyUv369dNjjz2mEydONHW5rdqZM2e0ZcsWr/PWz89PaWlplzxv8/PzvdpLUnp6Oud5AzSk/yXp+++/V/fu3RUXF6dbbrlFO3bsaI5yIc7/lmLQoEHq2rWrfvGLX2jDhg22y/EJFRUVkqSIiIhLtmmK879dg7cEWrAxY8Zo3LhxSkhI0N69e/X444/rxhtvVH5+vvz9/W2X57Nqr1+Pjo72Wh4dHc217fVUVlZ2weUn7dq1U0RExGX78te//rW6d++ubt266csvv9Ts2bO1a9cuvffee01dcqt15MgR1dTUXPS83blz50W3KSsr4zxvJA3p/8TERL366qsaMGCAKioq9Nxzz2nkyJHasWOHYmNjm6PsNu1S539lZaVOnjypDh06WKqsbejatateeuklDR06VKdPn9Yrr7yiUaNGqaCgQMnJybbLa7Xcbreys7N1zTXXqF+/fpds1xTv/wQyWDFnzhwtXLjwsm1KSkrUu3fvBu3/rrvu8vy7f//+GjBggK666irl5eXphhtuaNA+fUVT9z0ur67931A//I5Z//791bVrV91www3au3evrrrqqgbvF2hJUlNTlZqa6vl55MiRSkpK0t/+9jc9/fTTFisDml5iYqISExM9P48cOVJ79+7V888/rzfeeMNiZa1bZmamtm/frs8//7zZX5tABisefvhhTZo06bJtevTo0Wiv16NHD0VGRmrPnj1tPpA1Zd/HxMRIksrLy9W1a1fP8vLycg0aNKhB+/Q1de3/mJiYCyY0OHfunL777jtPP9dFSkqKJGnPnj0EskuIjIyUv7+/ysvLvZaXl5dfsq9jYmLq1R6X1pD+P1/79u01ePBg7dmzpylKxHkudf6HhoYyOmbJ8OHDrQQJXzFjxgzP5Fk/NsreFO//BDJY0aVLF3Xp0qXZXu/gwYM6evSoV0hoq5qy7xMSEhQTE6Pc3FxPAKusrFRBQUG9Z8n0VXXt/9TUVB0/flxbtmzRkCFDJElr1qyR2+32hKy62LZtmyRx7l9GQECAhgwZotzcXGVkZEhyLl3Jzc3VjBkzLrpNamqqcnNzlZ2d7Vm2evVqr1Eb1E1D+v98NTU1Kioq0k033dSElaJWamrqBdN8c/7btW3bNt7nG8AYo6ysLC1fvlx5eXlKSEj40W2a5P2/wdOBAM1k//79prCw0Dz55JOmU6dOprCw0BQWFpqqqipPm8TERPPee+8ZY4ypqqoyjzzyiMnPzzf79u0zn332mUlOTjZXX321OXXqlK3DaJXq2/fGGLNgwQITHh5u3n//ffPll1+aW265xSQkJJiTJ0/aOIRWbcyYMWbw4MGmoKDAfP755+bqq682d999t2f9wYMHTWJioikoKDDGGLNnzx7z1FNPmX//+99m37595v333zc9evQw1157ra1DaDWWLVtmAgMDTU5OjikuLjb33XefCQ8PN2VlZcYYYyZMmGDmzJnjab9hwwbTrl0789xzz5mSkhIzb9480759e1NUVGTrEFq1+vb/k08+aVatWmX27t1rtmzZYu666y4TFBRkduzYYesQWrWqqirP+7sk86c//ckUFhaa/fv3G2OMmTNnjpkwYYKn/X/+8x/TsWNHM2vWLFNSUmKWLFli/P39zSeffGLrEFq1+vb/888/b1asWGF2795tioqKzIMPPmj8/PzMZ599ZusQWq3p06ebsLAwk5eXZ7799lvP48SJE542zfH+TyBDizdx4kQj6YLH2rVrPW0kmaVLlxpjjDlx4oQZPXq06dKli2nfvr3p3r27uffeez2/2FF39e17Y5yp75944gkTHR1tAgMDzQ033GB27drV/MX7gKNHj5q7777bdOrUyYSGhprJkyd7heF9+/Z5/fcoLS011157rYmIiDCBgYGmZ8+eZtasWaaiosLSEbQuf/3rX018fLwJCAgww4cPNxs3bvSsu+6668zEiRO92r/zzjumV69eJiAgwPTt29esXLmymSv2LfXp/+zsbE/b6Ohoc9NNN5mtW7daqNo31E6jfv6jts8nTpxorrvuugu2GTRokAkICDA9evTw+j2A+qlv/y9cuNBcddVVJigoyERERJhRo0aZNWvW2Cm+lbtYv5//d01zvP+7/r8YAAAAAEAz4z5kAAAAAGAJgQwAAAAALCGQAQAAAIAlBDIAAAAAsIRABgAAAACWEMgAAAAAwBICGQAAAABYQiADAAAAAEsIZAAAAABgCYEMANAmTJo0SRkZGbbLAADAC4EMAIAmUlNTI7fbbbsMAEALRiADALQ5o0aNUlZWlrKzs3XFFVcoOjpaL7/8sqqrqzV58mSFhISoZ8+e+vjjjz3b5OXlyeVyaeXKlRowYICCgoI0YsQIbd++3dMmJydH4eHh+uc//6k+ffooMDBQpaWlOn36tB555BH97Gc/U3BwsFJSUpSXl+fZbv/+/br55pt1xRVXKDg4WH379tVHH30kyQl1U6ZMUUJCgjp06KDExET95S9/aba+AgA0LQIZAKBNeu211xQZGalNmzYpKytL06dP1+23366RI0dq69atGj16tCZMmKATJ054bTdr1iwtWrRImzdvVpcuXXTzzTfr7NmznvUnTpzQwoUL9corr2jHjh2KiorSjBkzlJ+fr2XLlunLL7/U7bffrjFjxmj37t2SpMzMTJ0+fVrr169XUVGRFi5cqE6dOkmS3G63YmNj9e6776q4uFhz587V448/rnfeeaf5OgsA0GRcxhhjuwgAAJrapEmTdPz4ca1YsUKjRo1STU2N/vWvf0lyRqHCwsI0btw4vf7665KksrIyde3aVfn5+RoxYoTy8vJ0/fXXa9myZbrzzjslSd99951iY2OVk5OjO+64Qzk5OZo8ebK2bdumgQMHSpJKS0vVo0cPlZaWqlu3bp560tLSNHz4cP3xj3/UgAEDdNttt2nevHl1OpYZM2aorKxM//jHPxqziwAAFrSzXQAAADYMGDDA829/f3917txZ/fv39yyLjo6WJB06dMhru9TUVM+/IyIilJiYqJKSEs+ygIAAr30XFRWppqZGvXr18trP6dOn1blzZ0nSAw88oOnTp+vTTz9VWlqabrvtNq99LFmyRK+++qpKS0t18uRJnTlzRoMGDfoJRw8AaCkIZACANql9+/ZeP7tcLq9lLpdLkuo9KUeHDh0820rS999/L39/f23ZskX+/v5ebWsvS5w6darS09O1cuVKffrpp5o/f74WLVqkrKwsLVu2TI888ogWLVqk1NRUhYSE6Nlnn1VBQUG96gIAtEwEMgAA6mHjxo2Kj4+XJB07dkxfffWVkpKSLtl+8ODBqqmp0aFDh/Tzn//8ku3i4uI0bdo0TZs2TY899phefvllZWVlacOGDRo5cqR++9vfetru3bu38Q4IAGAVgQwAgHp46qmn1LlzZ0VHR+t3v/udIiMjL3t/s169emn8+PG65557tGjRIg0ePFiHDx9Wbm6uBgwYoLFjxyo7O1s33nijevXqpWPHjmnt2rWekHf11Vfr9ddf16pVq5SQkKA33nhDmzdvVkJCQjMdMQCgKTHLIgAA9bBgwQI9+OCDGjJkiMrKyvTBBx8oICDgstssXbpU99xzjx5++GElJiYqIyNDmzdv9oy01dTUKDMzU0lJSRozZox69eqlF198UZJ0//33a9y4cbrzzjuVkpKio0ePeo2WAQBaN2ZZBACgDmpnWTx27JjCw8NtlwMA8BGMkAEAAACAJQQyAAAAALCESxYBAAAAwBJGyAAAAADAEgIZAAAAAFhCIAMAAAAASwhkAAAAAGAJgQwAAAAALCGQAQAAAIAlBDIAAAAAsIRABgAAAACW/B9+kOCde1fu0QAAAABJRU5ErkJggg==\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"QP_gotRvp5VP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Asumimos que 'df_test' es tu DataFrame que contiene los datos de prueba\n","# 'predictions' es un array con las predicciones de tu modelo\n","\n","# Crear un scatter plot de las predicciones contra una característica, digamos 'caracteristica_x'\n","plt.figure(figsize=(10, 6))\n","plt.scatter(df_test['paginas'], train_predictions, color='blue', label='Predicciones', alpha=0.5)\n","plt.title('Scatter Plot de Predicciones vs paginas')\n","plt.xlabel('paginas')\n","plt.ylabel('Predicciones de Ropa Mujer')\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"u01UiE0aQb5x","executionInfo":{"status":"ok","timestamp":1713830509025,"user_tz":300,"elapsed":1323,"user":{"displayName":"Carlos Talero","userId":"02343622721106739237"}},"outputId":"0e2ca414-00e4-4fd7-e31d-244dfea4907e"},"execution_count":41,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}